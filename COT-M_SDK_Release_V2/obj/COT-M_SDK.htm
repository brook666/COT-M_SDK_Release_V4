<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\COT-M_SDK.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\COT-M_SDK.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Dec 21 12:11:27 2017
<BR><P>
<H3>Maximum Stack Usage =       5432 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; osal_init_system &rArr; osalInitTasks &rArr; phy_layer_init(unsigned char) &rArr; verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6b]">am_nmi_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">am_nmi_isr</a><BR>
 <LI><a href="#[6d]">am_mpufault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">am_mpufault_isr</a><BR>
 <LI><a href="#[6e]">am_busfault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">am_busfault_isr</a><BR>
 <LI><a href="#[6f]">am_usagefault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">am_usagefault_isr</a><BR>
 <LI><a href="#[74]">am_brownout_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">am_brownout_isr</a><BR>
 <LI><a href="#[c4]">am_hal_flash_delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c4]">am_hal_flash_delay</a><BR>
 <LI><a href="#[20a]">cot_mt_led_blink</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">cot_mt_led_set</a><BR>
 <LI><a href="#[a2]">am_memmanage_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">am_memmanage_isr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[57]">ADC_Ioctl</a> from adc.o(i.ADC_Ioctl) referenced 2 times from adc.o(.data)
 <LI><a href="#[56]">ADC_Lseek</a> from adc.o(i.ADC_Lseek) referenced 2 times from adc.o(.data)
 <LI><a href="#[53]">ADC_Open</a> from adc.o(i.ADC_Open) referenced 2 times from adc.o(.data)
 <LI><a href="#[55]">ADC_Read</a> from adc.o(i.ADC_Read) referenced 2 times from adc.o(.data)
 <LI><a href="#[54]">ADC_Release</a> from adc.o(i.ADC_Release) referenced 2 times from adc.o(.data)
 <LI><a href="#[15]">FLASH_Lseek</a> from flash.o(i.FLASH_Lseek) referenced 2 times from flash.o(.data)
 <LI><a href="#[11]">FLASH_Open</a> from flash.o(i.FLASH_Open) referenced 2 times from flash.o(.data)
 <LI><a href="#[13]">FLASH_Read</a> from flash.o(i.FLASH_Read) referenced 2 times from flash.o(.data)
 <LI><a href="#[12]">FLASH_Release</a> from flash.o(i.FLASH_Release) referenced 2 times from flash.o(.data)
 <LI><a href="#[14]">FLASH_Write</a> from flash.o(i.FLASH_Write) referenced 2 times from flash.o(.data)
 <LI><a href="#[5c]">IIC0_Ioctl</a> from iic.o(i.IIC0_Ioctl) referenced 2 times from iic.o(.data)
 <LI><a href="#[58]">IIC0_Open</a> from iic.o(i.IIC0_Open) referenced 2 times from iic.o(.data)
 <LI><a href="#[5a]">IIC0_Read</a> from iic.o(i.IIC0_Read) referenced 2 times from iic.o(.data)
 <LI><a href="#[59]">IIC0_Release</a> from iic.o(i.IIC0_Release) referenced 2 times from iic.o(.data)
 <LI><a href="#[5b]">IIC0_Write</a> from iic.o(i.IIC0_Write) referenced 2 times from iic.o(.data)
 <LI><a href="#[28]">KEY1_GPIO_IRQ_Register</a> from gpio.o(i.KEY1_GPIO_IRQ_Register) referenced 2 times from gpio.o(.data)
 <LI><a href="#[27]">KEY1_GPIO_Ioctl</a> from gpio.o(i.KEY1_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[26]">KEY1_GPIO_Lseek</a> from gpio.o(i.KEY1_GPIO_Lseek) referenced 2 times from gpio.o(.data)
 <LI><a href="#[23]">KEY1_GPIO_Open</a> from gpio.o(i.KEY1_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[25]">KEY1_GPIO_Read</a> from gpio.o(i.KEY1_GPIO_Read) referenced 2 times from gpio.o(.data)
 <LI><a href="#[24]">KEY1_GPIO_Release</a> from gpio.o(i.KEY1_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[2e]">KEY2_GPIO_IRQ_Register</a> from gpio.o(i.KEY2_GPIO_IRQ_Register) referenced 2 times from gpio.o(.data)
 <LI><a href="#[2d]">KEY2_GPIO_Ioctl</a> from gpio.o(i.KEY2_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[2c]">KEY2_GPIO_Lseek</a> from gpio.o(i.KEY2_GPIO_Lseek) referenced 2 times from gpio.o(.data)
 <LI><a href="#[29]">KEY2_GPIO_Open</a> from gpio.o(i.KEY2_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[2b]">KEY2_GPIO_Read</a> from gpio.o(i.KEY2_GPIO_Read) referenced 2 times from gpio.o(.data)
 <LI><a href="#[2a]">KEY2_GPIO_Release</a> from gpio.o(i.KEY2_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[34]">KEY3_GPIO_IRQ_Register</a> from gpio.o(i.KEY3_GPIO_IRQ_Register) referenced 2 times from gpio.o(.data)
 <LI><a href="#[33]">KEY3_GPIO_Ioctl</a> from gpio.o(i.KEY3_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[32]">KEY3_GPIO_Lseek</a> from gpio.o(i.KEY3_GPIO_Lseek) referenced 2 times from gpio.o(.data)
 <LI><a href="#[2f]">KEY3_GPIO_Open</a> from gpio.o(i.KEY3_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[31]">KEY3_GPIO_Read</a> from gpio.o(i.KEY3_GPIO_Read) referenced 2 times from gpio.o(.data)
 <LI><a href="#[30]">KEY3_GPIO_Release</a> from gpio.o(i.KEY3_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[3a]">KEY4_GPIO_IRQ_Register</a> from gpio.o(i.KEY4_GPIO_IRQ_Register) referenced 2 times from gpio.o(.data)
 <LI><a href="#[39]">KEY4_GPIO_Ioctl</a> from gpio.o(i.KEY4_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[38]">KEY4_GPIO_Lseek</a> from gpio.o(i.KEY4_GPIO_Lseek) referenced 2 times from gpio.o(.data)
 <LI><a href="#[35]">KEY4_GPIO_Open</a> from gpio.o(i.KEY4_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[37]">KEY4_GPIO_Read</a> from gpio.o(i.KEY4_GPIO_Read) referenced 2 times from gpio.o(.data)
 <LI><a href="#[36]">KEY4_GPIO_Release</a> from gpio.o(i.KEY4_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[40]">KEY5_GPIO_IRQ_Register</a> from gpio.o(i.KEY5_GPIO_IRQ_Register) referenced 2 times from gpio.o(.data)
 <LI><a href="#[3f]">KEY5_GPIO_Ioctl</a> from gpio.o(i.KEY5_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[3e]">KEY5_GPIO_Lseek</a> from gpio.o(i.KEY5_GPIO_Lseek) referenced 2 times from gpio.o(.data)
 <LI><a href="#[3b]">KEY5_GPIO_Open</a> from gpio.o(i.KEY5_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[3d]">KEY5_GPIO_Read</a> from gpio.o(i.KEY5_GPIO_Read) referenced 2 times from gpio.o(.data)
 <LI><a href="#[3c]">KEY5_GPIO_Release</a> from gpio.o(i.KEY5_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[44]">LED1_GPIO_Ioctl</a> from gpio.o(i.LED1_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[41]">LED1_GPIO_Open</a> from gpio.o(i.LED1_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[42]">LED1_GPIO_Release</a> from gpio.o(i.LED1_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[43]">LED1_GPIO_Write</a> from gpio.o(i.LED1_GPIO_Write) referenced 2 times from gpio.o(.data)
 <LI><a href="#[48]">LED2_GPIO_Ioctl</a> from gpio.o(i.LED2_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[45]">LED2_GPIO_Open</a> from gpio.o(i.LED2_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[46]">LED2_GPIO_Release</a> from gpio.o(i.LED2_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[47]">LED2_GPIO_Write</a> from gpio.o(i.LED2_GPIO_Write) referenced 2 times from gpio.o(.data)
 <LI><a href="#[4c]">LED3_GPIO_Ioctl</a> from gpio.o(i.LED3_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[49]">LED3_GPIO_Open</a> from gpio.o(i.LED3_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[4a]">LED3_GPIO_Release</a> from gpio.o(i.LED3_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[4b]">LED3_GPIO_Write</a> from gpio.o(i.LED3_GPIO_Write) referenced 2 times from gpio.o(.data)
 <LI><a href="#[52]">RTC0_Ioctl</a> from rtc.o(i.RTC0_Ioctl) referenced 2 times from rtc.o(.data)
 <LI><a href="#[51]">RTC0_Lseek</a> from rtc.o(i.RTC0_Lseek) referenced 2 times from rtc.o(.data)
 <LI><a href="#[4d]">RTC0_Open</a> from rtc.o(i.RTC0_Open) referenced 2 times from rtc.o(.data)
 <LI><a href="#[4f]">RTC0_Read</a> from rtc.o(i.RTC0_Read) referenced 2 times from rtc.o(.data)
 <LI><a href="#[4e]">RTC0_Release</a> from rtc.o(i.RTC0_Release) referenced 2 times from rtc.o(.data)
 <LI><a href="#[50]">RTC0_Write</a> from rtc.o(i.RTC0_Write) referenced 2 times from rtc.o(.data)
 <LI><a href="#[6a]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[62]">SPI1_Ioctl</a> from spi1.o(i.SPI1_Ioctl) referenced 2 times from spi1.o(.data)
 <LI><a href="#[61]">SPI1_Lseek</a> from spi1.o(i.SPI1_Lseek) referenced 2 times from spi1.o(.data)
 <LI><a href="#[5d]">SPI1_Open</a> from spi1.o(i.SPI1_Open) referenced 2 times from spi1.o(.data)
 <LI><a href="#[5f]">SPI1_Read</a> from spi1.o(i.SPI1_Read) referenced 2 times from spi1.o(.data)
 <LI><a href="#[5e]">SPI1_Release</a> from spi1.o(i.SPI1_Release) referenced 2 times from spi1.o(.data)
 <LI><a href="#[60]">SPI1_Write</a> from spi1.o(i.SPI1_Write) referenced 2 times from spi1.o(.data)
 <LI><a href="#[1b]">SPI_Ioctl</a> from spi.o(i.SPI_Ioctl) referenced 2 times from spi.o(.data)
 <LI><a href="#[1a]">SPI_Lseek</a> from spi.o(i.SPI_Lseek) referenced 2 times from spi.o(.data)
 <LI><a href="#[16]">SPI_Open</a> from spi.o(i.SPI_Open) referenced 2 times from spi.o(.data)
 <LI><a href="#[18]">SPI_Read</a> from spi.o(i.SPI_Read) referenced 2 times from spi.o(.data)
 <LI><a href="#[17]">SPI_Release</a> from spi.o(i.SPI_Release) referenced 2 times from spi.o(.data)
 <LI><a href="#[19]">SPI_Write</a> from spi.o(i.SPI_Write) referenced 2 times from spi.o(.data)
 <LI><a href="#[22]">SX1280_GPIO_IRQ_Register</a> from gpio.o(i.SX1280_GPIO_IRQ_Register) referenced 2 times from gpio.o(.data)
 <LI><a href="#[21]">SX1280_GPIO_Ioctl</a> from gpio.o(i.SX1280_GPIO_Ioctl) referenced 2 times from gpio.o(.data)
 <LI><a href="#[20]">SX1280_GPIO_Lseek</a> from gpio.o(i.SX1280_GPIO_Lseek) referenced 2 times from gpio.o(.data)
 <LI><a href="#[1c]">SX1280_GPIO_Open</a> from gpio.o(i.SX1280_GPIO_Open) referenced 2 times from gpio.o(.data)
 <LI><a href="#[1e]">SX1280_GPIO_Read</a> from gpio.o(i.SX1280_GPIO_Read) referenced 2 times from gpio.o(.data)
 <LI><a href="#[1d]">SX1280_GPIO_Release</a> from gpio.o(i.SX1280_GPIO_Release) referenced 2 times from gpio.o(.data)
 <LI><a href="#[1f]">SX1280_GPIO_Write</a> from gpio.o(i.SX1280_GPIO_Write) referenced 2 times from gpio.o(.data)
 <LI><a href="#[10]">USART_Ioctl</a> from uart.o(i.USART_Ioctl) referenced 2 times from uart.o(.data)
 <LI><a href="#[c]">USART_Open</a> from uart.o(i.USART_Open) referenced 2 times from uart.o(.data)
 <LI><a href="#[e]">USART_Read</a> from uart.o(i.USART_Read) referenced 2 times from uart.o(.data)
 <LI><a href="#[d]">USART_Release</a> from uart.o(i.USART_Release) referenced 2 times from uart.o(.data)
 <LI><a href="#[f]">USART_Write</a> from uart.o(i.USART_Write) referenced 2 times from uart.o(.data)
 <LI><a href="#[67]">OnRxTimeout()</a> from cot_mac.o(i._Z11OnRxTimeoutv) referenced 2 times from cot_mac.o(.data)
 <LI><a href="#[66]">OnTxTimeout()</a> from cot_mac.o(i._Z11OnTxTimeoutv) referenced 2 times from cot_mac.o(.data)
 <LI><a href="#[69]">OnRangingDone(IrqRangingCode_t)</a> from cot_mac.o(i._Z13OnRangingDone16IrqRangingCode_t) referenced 2 times from cot_mac.o(.data)
 <LI><a href="#[83]">sx1280_dio_isr()</a> from cot_mac.o(i._Z14sx1280_dio_isrv) referenced from cot_mac.o(i._Z15init_parametersP18PHYParamSettings_t)
 <LI><a href="#[85]">get_radio_channel_power()</a> from cot_mac.o(i._Z23get_radio_channel_powerv) referenced from cot_mac.o(i._Z32cot_mac_layer_system_msg_processP13cot_mac_msg_t)
 <LI><a href="#[84]">send_mac_paylod_to_radio(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s)</a> from cot_mac.o(i._Z24send_mac_paylod_to_radioPhjP14PacketParams_tt10TickTime_s) referenced from cot_mac.o(i._Z32cot_mac_layer_system_msg_processP13cot_mac_msg_t)
 <LI><a href="#[8e]">cot_mac_layer_processevent(unsigned char, unsigned short)</a> from cot_mac.o(i._Z26cot_mac_layer_processeventht) referenced from osal_sample.o(.constdata)
 <LI><a href="#[65]">OnRxDone()</a> from cot_mac.o(i._Z8OnRxDonev) referenced 2 times from cot_mac.o(.data)
 <LI><a href="#[64]">OnTxDone()</a> from cot_mac.o(i._Z8OnTxDonev) referenced 2 times from cot_mac.o(.data)
 <LI><a href="#[68]">OnRxError(IrqErrorCode_t)</a> from cot_mac.o(i._Z9OnRxError14IrqErrorCode_t) referenced 2 times from cot_mac.o(.data)
 <LI><a href="#[91]">SX1280::OnDioIrq()</a> from sx1280.o(i._ZN6SX12808OnDioIrqEv) referenced from sx1280-hal.o(.constdata)
 <LI><a href="#[9b]">SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char)</a> from sx1280-hal.o(i._ZN9SX1280Hal10ReadBufferEhPhh) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[95]">SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short)</a> from sx1280-hal.o(i._ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[9a]">SX1280Hal::WriteBuffer(unsigned char, unsigned char*, unsigned char)</a> from sx1280-hal.o(i._ZN9SX1280Hal11WriteBufferEhPhh) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[99]">SX1280Hal::ReadRegister(unsigned short)</a> from sx1280-hal.o(i._ZN9SX1280Hal12ReadRegisterEt) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[98]">SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short)</a> from sx1280-hal.o(i._ZN9SX1280Hal12ReadRegisterEtPht) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[9d]">SX1280Hal::SetDirEnable()</a> from sx1280-hal.o(i._ZN9SX1280Hal12SetDirEnableEv) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[94]">SX1280Hal::WriteCommand(RadioCommands_u, unsigned char*, unsigned short)</a> from sx1280-hal.o(i._ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[9c]">SX1280Hal::SetDirDisable()</a> from sx1280-hal.o(i._ZN9SX1280Hal13SetDirDisableEv) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[96]">SX1280Hal::WriteRegister(unsigned short, unsigned char*, unsigned short)</a> from sx1280-hal.o(i._ZN9SX1280Hal13WriteRegisterEtPht) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[97]">SX1280Hal::WriteRegister(unsigned short, unsigned char)</a> from sx1280-hal.o(i._ZN9SX1280Hal13WriteRegisterEth) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[93]">SX1280Hal::Reset()</a> from sx1280-hal.o(i._ZN9SX1280Hal5ResetEv) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[9f]">SX1280Hal::Wakeup()</a> from sx1280-hal.o(i._ZN9SX1280Hal6WakeupEv) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[9e]">SX1280Hal::IoIrqInit(void(SX1280::*)())</a> from sx1280-hal.o(i._ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[86]">SX1280Hal::~SX1280Hal()</a> from sx1280-hal.o(i._ZN9SX1280HalD1Ev) referenced from sx1280-hal.o(.constdata__ZTV9SX1280Hal)
 <LI><a href="#[86]">SX1280Hal::~SX1280Hal()</a> from sx1280-hal.o(i._ZN9SX1280HalD1Ev) referenced from cot_mac.o(i.__sti___11_cot_mac_cpp_be55acdf)
 <LI><a href="#[92]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 13 times from sx1280-hal.o(.constdata__ZTV5Radio)
 <LI><a href="#[92]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 14 times from sx1280.o(.constdata__ZTV6SX1280)
 <LI><a href="#[a1]">__main</a> from __main.o(!!!main) referenced from startup_keil.o(RESET)
 <LI><a href="#[a0]">__sti___11_cot_mac_cpp_be55acdf</a> from cot_mac.o(i.__sti___11_cot_mac_cpp_be55acdf) referenced from cot_mac.o(.init_array)
 <LI><a href="#[82]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[81]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[7c]">am_adc_isr</a> from adc.o(i.am_adc_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[74]">am_brownout_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6e]">am_busfault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[76]">am_clkgen_isr</a> from rtc.o(i.am_clkgen_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[7e]">am_ctimer_isr</a> from hal_timers.o(i.am_ctimer_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[71]">am_debugmon_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6c]">am_fault_isr</a> from am_util_faultisr.o(.emb_text) referenced from startup_keil.o(RESET)
 <LI><a href="#[7d]">am_gpio_isr</a> from gpio.o(i.am_gpio_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[63]">am_hal_iom_sleeping_queue_flush</a> from am_hal_iom.o(i.am_hal_iom_sleeping_queue_flush) referenced 2 times from am_hal_iom.o(.data)
 <LI><a href="#[7a]">am_iomaster0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[7b]">am_iomaster1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[79]">am_ioslave_acc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[78]">am_ioslave_ios_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6d]">am_mpufault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6b]">am_nmi_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[72]">am_pendsv_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[70]">am_svcall_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[73]">am_systick_isr</a> from am_hal_systick.o(i.am_systick_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[7f]">am_uart_isr</a> from uart.o(i.am_uart_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[6f]">am_usagefault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[77]">am_vcomp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[75]">am_watchdog_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[87]">cot_key1_isr</a> from cot_mt_key.o(i.cot_key1_isr) referenced from cot_mt_key.o(i.cot_mt_key_init)
 <LI><a href="#[88]">cot_key2_isr</a> from cot_mt_key.o(i.cot_key2_isr) referenced from cot_mt_key.o(i.cot_mt_key_init)
 <LI><a href="#[89]">cot_key3_isr</a> from cot_mt_key.o(i.cot_key3_isr) referenced from cot_mt_key.o(i.cot_mt_key_init)
 <LI><a href="#[8a]">cot_key4_isr</a> from cot_mt_key.o(i.cot_key4_isr) referenced from cot_mt_key.o(i.cot_mt_key_init)
 <LI><a href="#[8b]">cot_key5_isr</a> from cot_mt_key.o(i.cot_key5_isr) referenced from cot_mt_key.o(i.cot_mt_key_init)
 <LI><a href="#[8c]">cot_mt_key_callback</a> from cot_mt_key.o(i.cot_mt_key_callback) referenced 2 times from cot_mt_key.o(i.cot_mt_key_callback)
 <LI><a href="#[8c]">cot_mt_key_callback</a> from cot_mt_key.o(i.cot_mt_key_callback) referenced from cot_mt_key.o(i.cot_mt_key_init)
 <LI><a href="#[90]">cot_mt_process_event</a> from cot_mt_task.o(i.cot_mt_process_event) referenced from osal_sample.o(.constdata)
 <LI><a href="#[8d]">log_uart_print</a> from log.o(i.log_uart_print) referenced from log.o(i.log_init_module)
 <LI><a href="#[8f]">sample_app_processevent</a> from sample_ping_pong_app.o(i.sample_app_processevent) referenced from osal_sample.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>am_nmi_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_nmi_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_nmi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>am_memmanage_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_memmanage_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_memmanage_isr
</UL>

<P><STRONG><a name="[6d]"></a>am_mpufault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpufault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpufault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>am_busfault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_busfault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_busfault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>am_usagefault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_usagefault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_usagefault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_brownout_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_brownout_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>am_debugmon_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>am_pendsv_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>am_svcall_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[293]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[294]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[295]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[296]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[297]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a7]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ca]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a9]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ab]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[298]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[bb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ad]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[af]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[299]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[29a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[29b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[29c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[29d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[29e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[29f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2a0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2a2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2a4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2a5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2a6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2a7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2a9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2aa]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2ab]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2ac]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[c0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[2ad]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2ae]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2af]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2b0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2b1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2b2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[a5]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2b3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2b4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bc]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osal_init_system &rArr; osalInitTasks &rArr; phy_layer_init(unsigned char) &rArr; verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ee]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bf]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2b6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[c1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6c]"></a>am_fault_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = am_fault_isr &rArr; am_util_faultisr_collect_data &rArr; log_printf &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f3]"></a>getStackedReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[c4]"></a>am_hal_flash_delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_flash.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>

<P><STRONG><a name="[234]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_task_state
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_kick
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_extract
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_enqueue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
</UL>

<P><STRONG><a name="[1dc]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_task_state
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_kick
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_extract
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_enqueue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_sleeping_queue_flush
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[1df]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_sleeping_queue_flush
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[24b]"></a>mpi_mul_hlp</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bignum.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[ed]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b7]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[21a]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[2b8]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_IDHashProgram()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
</UL>

<P><STRONG><a name="[d9]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[da]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[aa]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[ac]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[2b9]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[140]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[f6]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Write
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Release
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Read
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Open
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_IRQ_Register
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED3_GPIO_Write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED3_GPIO_Release
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED3_GPIO_Open
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED3_GPIO_Ioctl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_GPIO_Write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_GPIO_Release
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_GPIO_Open
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED2_GPIO_Ioctl
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_GPIO_Write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_GPIO_Release
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_GPIO_Open
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_GPIO_Ioctl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Release
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Read
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Open
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Ioctl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_IRQ_Register
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Release
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Read
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Open
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Ioctl
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_IRQ_Register
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Release
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Read
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Open
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Ioctl
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_IRQ_Register
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Release
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Read
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Open
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Ioctl
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_IRQ_Register
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Release
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Read
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Open
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Ioctl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_IRQ_Register
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Release
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Lseek
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Ioctl
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Release
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Open
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Release
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Read
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Open
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Write
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Release
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Lseek
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Ioctl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Release
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Read
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Open
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Ioctl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Release
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Lseek
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ioctl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Release
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Read
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Open
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Lseek
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Ioctl
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_layer_system_message_process(cot_mac_msg_t*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuReadBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_ram_data_format_to_cot_phy_payload(unsigned char*, unsigned, cot_phy_payload_t*, unsigned short*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_phy_payload_format_to_radio_ram_data(cot_phy_payload_t*, unsigned short, unsigned char*, unsigned*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_msg_format_to_cot_phy_payload(unsigned char*, unsigned short, unsigned, unsigned, unsigned char, cot_phy_payload_t*, unsigned*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_msg_to_app_layer(cot_phy_payload_t*, unsigned short)
</UL>

<P><STRONG><a name="[cb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2ba]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[2bb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[d0]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ce]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_layer_system_message_process(cot_mac_msg_t*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[2be]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[24f]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2c0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[d2]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[d5]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[d6]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[d8]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2c1]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[81]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[2c2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2c4]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[e8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b0]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ea]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e3]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[dc]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e5]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[c2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[be]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[eb]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[e9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ef]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2c8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[dd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f2]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f1]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f3]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f4]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[de]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[fc]"></a>EA_ucRSAPublicBlock</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, rsa.o(i.EA_ucRSAPublicBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 5200<LI>Call Chain = EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_InitModule</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(i.FLASH_InitModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_InitModule
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>FLASH_Lseek</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash.o(i.FLASH_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_Read</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, flash.o(i.FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_Write</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, flash.o(i.FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLASH_Write &rArr; am_hal_flash_program_main
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>I2C_WriteByte</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, cot_mt_oled.o(i.I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[10f]"></a>OLED_CLS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cot_mt_oled.o(i.OLED_CLS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_CLS &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_oled_init
</UL>

<P><STRONG><a name="[111]"></a>OLED_DrawBMP</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, cot_mt_oled.o(i.OLED_DrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_DrawBMP &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_oled_init
</UL>

<P><STRONG><a name="[110]"></a>OLED_Fill</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cot_mt_oled.o(i.OLED_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[114]"></a>OLED_SetPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cot_mt_oled.o(i.OLED_SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[119]"></a>OLED_ShowShiny</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cot_mt_oled.o(i.OLED_ShowShiny))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
</UL>

<P><STRONG><a name="[118]"></a>OLED_ShowStr8x16</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, cot_mt_oled.o(i.OLED_ShowStr8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_ShowStr8x16 &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowShiny
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[11a]"></a>OLED_register_init</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, cot_mt_oled.o(i.OLED_register_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_register_init &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_oled_init
</UL>

<P><STRONG><a name="[120]"></a>SHA256Final</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sha256.o(i.SHA256Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SHA256Final &rArr; SHA256Update &rArr; SHA256Guts
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_byteswap64
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[13d]"></a>SHA256Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sha256.o(i.SHA256Init))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[122]"></a>SHA256Update</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sha256.o(i.SHA256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SHA256Update &rArr; SHA256Guts
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Guts
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Final
</UL>

<P><STRONG><a name="[117]"></a>WriteCmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cot_mt_oled.o(i.WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteCmd &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_register_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[115]"></a>WriteDat</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cot_mt_oled.o(i.WriteDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteDat &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
</UL>

<P><STRONG><a name="[134]"></a>get_dev_id()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfparamconfig.o(i._Z10get_dev_idv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = get_dev_id() &rArr; LoRaMAC_IDHashProgram() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_IDHashProgram()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[67]"></a>OnRxTimeout()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cot_mac.o(i._Z11OnRxTimeoutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnRxTimeout() &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>OnTxTimeout()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cot_mac.o(i._Z11OnTxTimeoutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnTxTimeout() &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.data)
</UL>
<P><STRONG><a name="[13f]"></a>ReadDataOtp(unsigned char*, unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cot_mac.o(i._Z11ReadDataOtpPhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadDataOtp(unsigned char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
</UL>

<P><STRONG><a name="[141]"></a>CheckDistance(ModulationParams_t*)</STRONG> (Thumb, 1200 bytes, Stack size 416 bytes, cot_ranging.o(i._Z13CheckDistanceP18ModulationParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = CheckDistance(ModulationParams_t*) &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[14b]"></a>DataFlashInit(ConfigData_t*)</STRONG> (Thumb, 66 bytes, Stack size 136 bytes, rfparamconfig.o(i._Z13DataFlashInitP12ConfigData_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = DataFlashInit(ConfigData_t*) &rArr; DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*) &rArr; LoRaMAC_IDHashProgram() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashLoadGeneralSettings(unsigned char*, ConfigData_t*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuReadBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashLoadSettings(unsigned char*, ConfigData_t*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDataCheckSum(unsigned char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[69]"></a>OnRangingDone(IrqRangingCode_t)</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cot_mac.o(i._Z13OnRangingDone16IrqRangingCode_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnRangingDone(IrqRangingCode_t) &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>phy_layer_init(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cot_mac.o(i._Z14phy_layer_inith))
<BR><BR>[Stack]<UL><LI>Max Depth = 5416 + Unknown Stack Size
<LI>Call Chain = phy_layer_init(unsigned char) &rArr; verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_sign()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[83]"></a>sx1280_dio_isr()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cot_mac.o(i._Z14sx1280_dio_isrv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sx1280_dio_isr() &rArr; SX1280::OnDioIrq() &rArr; SX1280::ProcessIrqs() &rArr; SX1280::ClearIrqStatus(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::OnDioIrq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(i._Z15init_parametersP18PHYParamSettings_t)
</UL>
<P><STRONG><a name="[169]"></a>phy_get_payload(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cot_mac.o(i._Z15phy_get_payloadPhS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = phy_get_payload(unsigned char*, unsigned char*, unsigned char) &rArr; SX1280::GetPayload(unsigned char*, unsigned char*, unsigned char) &rArr; SX1280::GetRxBufferStatus(unsigned char*, unsigned char*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPayload(unsigned char*, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[16b]"></a>phy_send_payload(unsigned char*, unsigned char, TickTime_s)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, cot_mac.o(i._Z16phy_send_payloadPhh10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = phy_send_payload(unsigned char*, unsigned char, TickTime_s) &rArr; SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char) &rArr; SX1280::SetTx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[16d]"></a>phy_set_radio_rx(TickTime_s)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cot_mac.o(i._Z16phy_set_radio_rx10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phy_set_radio_rx(TickTime_s) &rArr; SX1280::SetRx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[16e]"></a>phy_set_radio_tx(TickTime_s)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cot_mac.o(i._Z16phy_set_radio_tx10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phy_set_radio_tx(TickTime_s) &rArr; SX1280::SetTx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTx(TickTime_s)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[170]"></a>send_mac_ack_msg(unsigned)</STRONG> (Thumb, 186 bytes, Stack size 480 bytes, cot_mac.o(i._Z16send_mac_ack_msgj))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = send_mac_ack_msg(unsigned) &rArr; get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t) &rArr; __hardfp_floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_phy_payload_format_to_radio_ram_data(cot_phy_payload_t*, unsigned short, unsigned char*, unsigned*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_phy_SetPacketParams(unsigned char, PacketParams_t*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[15b]"></a>ParametersSettings(PHYParamSettings_t*)</STRONG> (Thumb, 686 bytes, Stack size 0 bytes, cot_mac.o(i._Z18ParametersSettingsP18PHYParamSettings_t))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ModulationParameters(PHYParamSettings_t*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[176]"></a>set_workparameters()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cot_mac.o(i._Z18set_workparametersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = set_workparameters() &rArr; SX1280::SetRfFrequency(unsigned) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetModulationParams(ModulationParams_t*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTxParams(signed char, RadioRampTimes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ModulationParameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[271]"></a>sample_rf_param_get(ConfigData_t, PHYParamSettings_t*)</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, rfparamconfig.o(i._Z19sample_rf_param_get12ConfigData_tP18PHYParamSettings_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sample_rf_param_get(ConfigData_t, PHYParamSettings_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[198]"></a>set_rssi_water_leve(short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cot_mac_protocol_parse.o(i._Z19set_rssi_water_leves))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[177]"></a>phy_set_rf_frequency(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cot_mac.o(i._Z20phy_set_rf_frequencyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = phy_set_rf_frequency(unsigned) &rArr; SX1280::SetRfFrequency(unsigned) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[150]"></a>DataFlashLoadSettings(unsigned char*, ConfigData_t*)</STRONG> (Thumb, 530 bytes, Stack size 8 bytes, rfparamconfig.o(i._Z21DataFlashLoadSettingsPhP12ConfigData_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DataFlashLoadSettings(unsigned char*, ConfigData_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
</UL>

<P><STRONG><a name="[178]"></a>DataFlashSaveSettings(unsigned char*, ConfigData_t*, bool, RF_RadioPacketTypes_t)</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, rfparamconfig.o(i._Z21DataFlashSaveSettingsPhP12ConfigData_tb21RF_RadioPacketTypes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataFlashSaveSettings(unsigned char*, ConfigData_t*, bool, RF_RadioPacketTypes_t) &rArr; DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short) &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashDataCheckSum(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*)
</UL>

<P><STRONG><a name="[272]"></a>get_mac_layer_task_id()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cot_mac.o(i._Z21get_mac_layer_task_idv))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[17c]"></a>phy_get_packet_status(PacketStatus_t*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cot_mac.o(i._Z21phy_get_packet_statusP14PacketStatus_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phy_get_packet_status(PacketStatus_t*) &rArr; SX1280::GetPacketStatus(PacketStatus_t*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketStatus(PacketStatus_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[17e]"></a>phy_set_dio_irq_param(unsigned short, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cot_mac.o(i._Z21phy_set_dio_irq_paramtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = phy_set_dio_irq_param(unsigned short, unsigned short) &rArr; SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[17f]"></a>phy_set_radio_standby()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cot_mac.o(i._Z21phy_set_radio_standbyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phy_set_radio_standby() &rArr; SX1280::SetStandby(RadioStandbyModes_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetStandby(RadioStandbyModes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[14c]"></a>DataFlashMcuReadBuffer(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rfparamconfig.o(i._Z22DataFlashMcuReadBuffertPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataFlashMcuReadBuffer(unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
</UL>

<P><STRONG><a name="[180]"></a>phy_get_ranging_result(RadioRangingResultTypes_t)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cot_mac.o(i._Z22phy_get_ranging_result25RadioRangingResultTypes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = phy_get_ranging_result(RadioRangingResultTypes_t) &rArr; SX1280::GetRangingResult(RadioRangingResultTypes_t) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[179]"></a>DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rfparamconfig.o(i._Z23DataFlashMcuWriteBuffertPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short) &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSaveSettings(unsigned char*, ConfigData_t*, bool, RF_RadioPacketTypes_t)
</UL>

<P><STRONG><a name="[172]"></a>cot_phy_SetPacketParams(unsigned char, PacketParams_t*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cot_mac.o(i._Z23cot_phy_SetPacketParamshP14PacketParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cot_phy_SetPacketParams(unsigned char, PacketParams_t*) &rArr; SX1280::SetPacketParams(PacketParams_t*) &rArr; SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_paylod_to_radio(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
</UL>

<P><STRONG><a name="[85]"></a>get_radio_channel_power()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cot_mac.o(i._Z23get_radio_channel_powerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_radio_channel_power() &rArr; SX1280::SetRx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRssiInst()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetStandby(RadioStandbyModes_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(i._Z32cot_mac_layer_system_msg_processP13cot_mac_msg_t)
</UL>
<P><STRONG><a name="[184]"></a>phy_get_frequency_error()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cot_mac.o(i._Z23phy_get_frequency_errorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = phy_get_frequency_error() &rArr; SX1280::GetFrequencyError() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[84]"></a>send_mac_paylod_to_radio(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cot_mac.o(i._Z24send_mac_paylod_to_radioPhjP14PacketParams_tt10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_mac_paylod_to_radio(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s) &rArr; SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char) &rArr; SX1280::SetTx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_phy_SetPacketParams(unsigned char, PacketParams_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(i._Z32cot_mac_layer_system_msg_processP13cot_mac_msg_t)
</UL>
<P><STRONG><a name="[187]"></a>send_mac_msg_to_app_layer(cot_phy_payload_t*, unsigned short)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, cot_mac.o(i._Z25send_mac_msg_to_app_layerP17cot_phy_payload_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_mac_msg_to_app_layer(cot_phy_payload_t*, unsigned short) &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[188]"></a>send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, cot_mac_protocol_parse.o(i._Z25send_pkg_by_backoffPeriodPhjP18ModulationParams_tP14PacketParams_tt10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unit_backoff_period_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t, int*, int*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unit_backoff_period_in_flrc(RadioFlrcBitrates_t, int*)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unit_backoff_period_in_fsk(RadioGfskBleBitrates_t, int*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[8e]"></a>cot_mac_layer_processevent(unsigned char, unsigned short)</STRONG> (Thumb, 1160 bytes, Stack size 40 bytes, cot_mac.o(i._Z26cot_mac_layer_processeventht))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = cot_mac_layer_processevent(unsigned char, unsigned short) &rArr; cot_mac_layer_system_msg_process(cot_mac_msg_t*) &rArr; send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_app_event_cmd(unsigned char)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ack_rx()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SetDirDisable()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SetDirEnable()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketStatus(PacketStatus_t*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPayload(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_ram_data_format_to_cot_phy_payload(unsigned char*, unsigned, cot_phy_payload_t*, unsigned short*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_symbols_of_ack_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcMode()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_msg_to_app_layer(cot_phy_payload_t*, unsigned short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_sample.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>get_symbols_of_ack_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t)</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, cot_mac_protocol_parse.o(i._Z26get_symbols_of_ack_in_lr2427RadioLoRaSpreadingFactors_t21RadioLoRaBandwidths_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_symbols_of_ack_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ack_rx()
</UL>

<P><STRONG><a name="[14f]"></a>DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*)</STRONG> (Thumb, 330 bytes, Stack size 144 bytes, rfparamconfig.o(i._Z27DataFlashSetDefaultSettingsPhP12ConfigData_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*) &rArr; LoRaMAC_IDHashProgram() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSaveSettings(unsigned char*, ConfigData_t*, bool, RF_RadioPacketTypes_t)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_IDHashProgram()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
</UL>

<P><STRONG><a name="[14d]"></a>DataFlashLoadGeneralSettings(unsigned char*, ConfigData_t*)</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, rfparamconfig.o(i._Z28DataFlashLoadGeneralSettingsPhP12ConfigData_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = DataFlashLoadGeneralSettings(unsigned char*, ConfigData_t*) &rArr; LoRaMAC_IDHashProgram() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_IDHashProgram()
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
</UL>

<P><STRONG><a name="[18b]"></a>get_unit_backoff_period_in_fsk(RadioGfskBleBitrates_t, int*)</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, cot_mac_protocol_parse.o(i._Z30get_unit_backoff_period_in_fsk22RadioGfskBleBitrates_tPi))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[18a]"></a>get_unit_backoff_period_in_flrc(RadioFlrcBitrates_t, int*)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cot_mac_protocol_parse.o(i._Z31get_unit_backoff_period_in_flrc19RadioFlrcBitrates_tPi))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[189]"></a>get_unit_backoff_period_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t, int*, int*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, cot_mac_protocol_parse.o(i._Z31get_unit_backoff_period_in_lr2427RadioLoRaSpreadingFactors_t21RadioLoRaBandwidths_tPiS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_unit_backoff_period_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t, int*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[199]"></a>cot_mac_msg_format_to_cot_phy_payload(unsigned char*, unsigned short, unsigned, unsigned, unsigned char, cot_phy_payload_t*, unsigned*)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cot_mac_protocol_parse.o(i._Z37cot_mac_msg_format_to_cot_phy_payloadPhtjjhP17cot_phy_payload_tPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cot_mac_msg_format_to_cot_phy_payload(unsigned char*, unsigned short, unsigned, unsigned, unsigned char, cot_phy_payload_t*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[19f]"></a>phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cot_mac.o(i._Z39phy_set_modulation_and_packettype_paramP18ModulationParams_tP14PacketParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*) &rArr; SX1280::SetRfFrequency(unsigned) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetModulationParams(ModulationParams_t*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[197]"></a>cot_mac_protocol_parse_callback_register(signed char(*)(), void(*)(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s))</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cot_mac_protocol_parse.o(i._Z40cot_mac_protocol_parse_callback_registerPFavEPFvPhjP14PacketParams_tt10TickTime_sE))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[171]"></a>cot_phy_payload_format_to_radio_ram_data(cot_phy_payload_t*, unsigned short, unsigned char*, unsigned*)</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cot_mac_protocol_parse.o(i._Z40cot_phy_payload_format_to_radio_ram_dataP17cot_phy_payload_ttPhPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cot_phy_payload_format_to_radio_ram_data(cot_phy_payload_t*, unsigned short, unsigned char*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
</UL>

<P><STRONG><a name="[194]"></a>radio_ram_data_format_to_cot_phy_payload(unsigned char*, unsigned, cot_phy_payload_t*, unsigned short*)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cot_mac_protocol_parse.o(i._Z40radio_ram_data_format_to_cot_phy_payloadPhjP17cot_phy_payload_tPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = radio_ram_data_format_to_cot_phy_payload(unsigned char*, unsigned, cot_phy_payload_t*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[1a0]"></a>phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cot_mac.o(i._Z58phy_set_ranging_slave_mode_modulation_and_packettype_paramP18ModulationParams_tP14PacketParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*) &rArr; SX1280::SetDeviceRangingAddress(unsigned) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDeviceRangingAddress(unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingCalibration(unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetModulationParams(ModulationParams_t*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTxParams(signed char, RadioRampTimes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[1a3]"></a>phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cot_mac.o(i._Z59phy_set_ranging_master_mode_modulation_and_packettype_paramP18ModulationParams_tP14PacketParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*) &rArr; SX1280::SetRangingRequestAddress(unsigned) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingRequestAddress(unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingCalibration(unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetModulationParams(ModulationParams_t*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTxParams(signed char, RadioRampTimes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[65]"></a>OnRxDone()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cot_mac.o(i._Z8OnRxDonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnRxDone() &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>OnTxDone()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cot_mac.o(i._Z8OnTxDonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnTxDone() &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>OnRxError(IrqErrorCode_t)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cot_mac.o(i._Z9OnRxError14IrqErrorCode_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OnRxError(IrqErrorCode_t) &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>SetRcMode()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cot_mac.o(i._Z9SetRcModev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetRcMode() &rArr; SX1280Hal::SetDirDisable() &rArr; ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SetDirDisable()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SetDirEnable()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetStandby(RadioStandbyModes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[16a]"></a>SX1280::GetPayload(unsigned char*, unsigned char*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128010GetPayloadEPhS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1280::GetPayload(unsigned char*, unsigned char*, unsigned char) &rArr; SX1280::GetRxBufferStatus(unsigned char*, unsigned char*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRxBufferStatus(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_payload(unsigned char*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>SX1280::SetCrcSeed(unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128010SetCrcSeedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetCrcSeed(unsigned char*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[1aa]"></a>SX1280::SetPayload(unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128010SetPayloadEPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetPayload(unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char)
</UL>

<P><STRONG><a name="[15f]"></a>SX1280::SetStandby(RadioStandbyModes_t)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128010SetStandbyE19RadioStandbyModes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetStandby(RadioStandbyModes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcMode()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_radio_channel_power()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_radio_standby()
</UL>

<P><STRONG><a name="[183]"></a>SX1280::GetRssiInst()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1280.o(i._ZN6SX128011GetRssiInstEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1280::GetRssiInst()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_radio_channel_power()
</UL>

<P><STRONG><a name="[1a7]"></a>SX1280::ProcessIrqs()</STRONG> (Thumb, 664 bytes, Stack size 16 bytes, sx1280.o(i._ZN6SX128011ProcessIrqsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1280::ProcessIrqs() &rArr; SX1280::ClearIrqStatus(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ClearIrqStatus(unsigned short)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetIrqStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::OnDioIrq()
</UL>

<P><STRONG><a name="[16c]"></a>SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, sx1280.o(i._ZN6SX128011SendPayloadEPhh10TickTime_sh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char) &rArr; SX1280::SetTx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPayload(unsigned char*, unsigned char, unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTx(TickTime_s)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_paylod_to_radio(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_send_payload(unsigned char*, unsigned char, TickTime_s)
</UL>

<P><STRONG><a name="[165]"></a>SX1280::SetSyncWord(unsigned char, unsigned char*)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128011SetSyncWordEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetSyncWord(unsigned char, unsigned char*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[168]"></a>SX1280::SetTxParams(signed char, RadioRampTimes_t)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128011SetTxParamsEa16RadioRampTimes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetTxParams(signed char, RadioRampTimes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workparameters()
</UL>

<P><STRONG><a name="[1ac]"></a>SX1280::complement2(unsigned, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1280.o(i._ZN6SX128011complement2Ejh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1280::complement2(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
</UL>

<P><STRONG><a name="[1a8]"></a>SX1280::GetIrqStatus()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx1280.o(i._ZN6SX128012GetIrqStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1280::GetIrqStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ProcessIrqs()
</UL>

<P><STRONG><a name="[1a6]"></a>SX1280::GetPacketType(bool)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128013GetPacketTypeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRxBufferStatus(unsigned char*, unsigned char*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ProcessIrqs()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTx(TickTime_s)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingRequestAddress(unsigned)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDeviceRangingAddress(unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingCalibration(unsigned short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetCrcPolynomial(unsigned short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketStatus(PacketStatus_t*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetSyncWord(unsigned char, unsigned char*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetCrcSeed(unsigned char*)
</UL>

<P><STRONG><a name="[160]"></a>SX1280::SetPacketType(RadioPacketTypes_t)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128013SetPacketTypeE18RadioPacketTypes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetModulationParams(ModulationParams_t*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workparameters()
</UL>

<P><STRONG><a name="[1a9]"></a>SX1280::ClearIrqStatus(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128014ClearIrqStatusEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::ClearIrqStatus(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ProcessIrqs()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTx(TickTime_s)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
</UL>

<P><STRONG><a name="[1ad]"></a>SX1280::SetRangingRole(RadioRangingRoles_t)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128014SetRangingRoleE19RadioRangingRoles_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTx(TickTime_s)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
</UL>

<P><STRONG><a name="[161]"></a>SX1280::SetRfFrequency(unsigned)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, sx1280.o(i._ZN6SX128014SetRfFrequencyEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SX1280::SetRfFrequency(unsigned) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_rf_frequency(unsigned)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workparameters()
</UL>

<P><STRONG><a name="[19a]"></a>SX1280::SetSaveContext()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1280.o(i._ZN6SX128014SetSaveContextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1280::SetSaveContext()
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[17d]"></a>SX1280::GetPacketStatus(PacketStatus_t*)</STRONG> (Thumb, 606 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128015GetPacketStatusEP14PacketStatus_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::GetPacketStatus(PacketStatus_t*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_packet_status(PacketStatus_t*)
</UL>

<P><STRONG><a name="[139]"></a>SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sx1280.o(i._ZN6SX128015SetDioIrqParamsEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ack_rx()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_paylod_to_radio(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_dio_irq_param(unsigned short, unsigned short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
</UL>

<P><STRONG><a name="[164]"></a>SX1280::SetPacketParams(PacketParams_t*)</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128015SetPacketParamsEP14PacketParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetPacketParams(PacketParams_t*) &rArr; SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_phy_SetPacketParams(unsigned char, PacketParams_t*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workparameters()
</UL>

<P><STRONG><a name="[1ab]"></a>SX1280::GetLoRaBandwidth()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sx1280.o(i._ZN6SX128016GetLoRaBandwidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
</UL>

<P><STRONG><a name="[181]"></a>SX1280::GetRangingResult(RadioRangingResultTypes_t)</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, sx1280.o(i._ZN6SX128016GetRangingResultE25RadioRangingResultTypes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1280::GetRangingResult(RadioRangingResultTypes_t) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetLoRaBandwidth()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::complement2(unsigned, unsigned char)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetStandby(RadioStandbyModes_t)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_ranging_result(RadioRangingResultTypes_t)
</UL>

<P><STRONG><a name="[167]"></a>SX1280::SetCrcPolynomial(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128016SetCrcPolynomialEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetCrcPolynomial(unsigned short) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[15e]"></a>SX1280::SetRegulatorMode(RadioRegulatorModes_t)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetRegulatorMode(RadioRegulatorModes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[185]"></a>SX1280::GetFrequencyError()</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, sx1280.o(i._ZN6SX128017GetFrequencyErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX1280::GetFrequencyError() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetLoRaBandwidth()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::complement2(unsigned, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_frequency_error()
</UL>

<P><STRONG><a name="[1a5]"></a>SX1280::GetRxBufferStatus(unsigned char*, unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128017GetRxBufferStatusEPhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::GetRxBufferStatus(unsigned char*, unsigned char*) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPayload(unsigned char*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[163]"></a>SX1280::SetModulationParams(ModulationParams_t*)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128019SetModulationParamsEP18ModulationParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetModulationParams(ModulationParams_t*) &rArr; SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workparameters()
</UL>

<P><STRONG><a name="[1a2]"></a>SX1280::SetRangingCalibration(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1280.o(i._ZN6SX128021SetRangingCalibrationEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1280::SetRangingCalibration(unsigned short) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
</UL>

<P><STRONG><a name="[162]"></a>SX1280::SetBufferBaseAddresses(unsigned char, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128022SetBufferBaseAddressesEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetBufferBaseAddresses(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[1a1]"></a>SX1280::SetDeviceRangingAddress(unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128023SetDeviceRangingAddressEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetDeviceRangingAddress(unsigned) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
</UL>

<P><STRONG><a name="[1a4]"></a>SX1280::SetRangingRequestAddress(unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX128024SetRangingRequestAddressEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetRangingRequestAddress(unsigned) &rArr; SX1280::GetPacketType(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
</UL>

<P><STRONG><a name="[15d]"></a>SX1280::Init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sx1280.o(i._ZN6SX12804InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1280::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[138]"></a>SX1280::SetRx(TickTime_s)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX12805SetRxE10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetRx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingRole(RadioRangingRoles_t)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ClearIrqStatus(unsigned short)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ack_rx()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_radio_channel_power()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_radio_rx(TickTime_s)
</UL>

<P><STRONG><a name="[16f]"></a>SX1280::SetTx(TickTime_s)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX12805SetTxE10TickTime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::SetTx(TickTime_s) &rArr; SX1280::SetRangingRole(RadioRangingRoles_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRangingRole(RadioRangingRoles_t)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ClearIrqStatus(unsigned short)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetPacketType(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SendPayload(unsigned char*, unsigned char, TickTime_s, unsigned char)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_radio_tx(TickTime_s)
</UL>

<P><STRONG><a name="[91]"></a>SX1280::OnDioIrq()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx1280.o(i._ZN6SX12808OnDioIrqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280::OnDioIrq() &rArr; SX1280::ProcessIrqs() &rArr; SX1280::ClearIrqStatus(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::ProcessIrqs()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx1280_dio_isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>SX1280::SetSleep(SleepParams_t)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sx1280.o(i._ZN6SX12808SetSleepE13SleepParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280::SetSleep(SleepParams_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[1b1]"></a>SX1280::SX1280__sub_object(RadioCallbacks_t*)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sx1280-hal.o(i._ZN6SX1280C2EP16RadioCallbacks_t))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SX1280Hal(RadioCallbacks_t*)
</UL>

<P><STRONG><a name="[9b]"></a>SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, sx1280-hal.o(i._ZN9SX1280Hal10ReadBufferEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char) &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[1ae]"></a>SX1280Hal::WaitOnBusy()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx1280-hal.o(i._ZN9SX1280Hal10WaitOnBusyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Wakeup()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteBuffer(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[95]"></a>SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sx1280-hal.o(i._ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short) &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[9a]"></a>SX1280Hal::WriteBuffer(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, sx1280-hal.o(i._ZN9SX1280Hal11WriteBufferEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1280Hal::WriteBuffer(unsigned char, unsigned char*, unsigned char) &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[99]"></a>SX1280Hal::ReadRegister(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sx1280-hal.o(i._ZN9SX1280Hal12ReadRegisterEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280Hal::ReadRegister(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[98]"></a>SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sx1280-hal.o(i._ZN9SX1280Hal12ReadRegisterEtPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short) &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[9d]"></a>SX1280Hal::SetDirEnable()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1280-hal.o(i._ZN9SX1280Hal12SetDirEnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280Hal::SetDirEnable() &rArr; ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[94]"></a>SX1280Hal::WriteCommand(RadioCommands_u, unsigned char*, unsigned short)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sx1280-hal.o(i._ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1280Hal::WriteCommand(RadioCommands_u, unsigned char*, unsigned short) &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[9c]"></a>SX1280Hal::SetDirDisable()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1280-hal.o(i._ZN9SX1280Hal13SetDirDisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280Hal::SetDirDisable() &rArr; ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcMode()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[96]"></a>SX1280Hal::WriteRegister(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sx1280-hal.o(i._ZN9SX1280Hal13WriteRegisterEtPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1280Hal::WriteRegister(unsigned short, unsigned char*, unsigned short) &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[97]"></a>SX1280Hal::WriteRegister(unsigned short, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, sx1280-hal.o(i._ZN9SX1280Hal13WriteRegisterEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280Hal::WriteRegister(unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[93]"></a>SX1280Hal::Reset()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sx1280-hal.o(i._ZN9SX1280Hal5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1280Hal::Reset() &rArr; SX1280Hal::HalInit() &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalInit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[9f]"></a>SX1280Hal::Wakeup()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sx1280-hal.o(i._ZN9SX1280Hal6WakeupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1280Hal::Wakeup() &rArr; SX1280Hal::WaitOnBusy() &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[152]"></a>SX1280Hal::HalInit()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, sx1280-hal.o(i._ZN9SX1280Hal7HalInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280Hal::HalInit() &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_layer_init(unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Reset()
</UL>

<P><STRONG><a name="[19c]"></a>SX1280Hal::HalSleep()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1280-hal.o(i._ZN9SX1280Hal8HalSleepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280Hal::HalSleep() &rArr; ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[9e]"></a>SX1280Hal::IoIrqInit(void(SX1280::*)())</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1280-hal.o(i._ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE))
<BR>[Address Reference Count : 1]<UL><LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[1b0]"></a>SX1280Hal::SX1280Hal(RadioCallbacks_t*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx1280-hal.o(i._ZN9SX1280HalC1EP16RadioCallbacks_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1280Hal::SX1280Hal(RadioCallbacks_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SX1280__sub_object(RadioCallbacks_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_cot_mac_cpp_be55acdf
</UL>

<P><STRONG><a name="[2cb]"></a>SX1280Hal::SX1280Hal__sub_object(RadioCallbacks_t*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, sx1280-hal.o(i._ZN9SX1280HalC1EP16RadioCallbacks_t), UNUSED)

<P><STRONG><a name="[86]"></a>SX1280Hal::~SX1280Hal()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sx1280-hal.o(i._ZN9SX1280HalD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> cot_mac.o(i.__sti___11_cot_mac_cpp_be55acdf)
<LI> sx1280-hal.o(.constdata__ZTV9SX1280Hal)
</UL>
<P><STRONG><a name="[2cc]"></a>SX1280Hal::~SX1280Hal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sx1280-hal.o(i._ZN9SX1280HalD1Ev), UNUSED)

<P><STRONG><a name="[14a]"></a>std::pow(double, int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cot_ranging.o(i._ZSt3powdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
</UL>

<P><STRONG><a name="[159]"></a>std::ceil(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cot_mac.o(i._ZSt4ceilf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ceil(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
</UL>

<P><STRONG><a name="[e2]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_cot_mac_cpp_be55acdf
</UL>

<P><STRONG><a name="[b7]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[92]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sx1280-hal.o(.constdata__ZTV5Radio)
<LI> sx1280.o(.constdata__ZTV6SX1280)
</UL>
<P><STRONG><a name="[156]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
</UL>

<P><STRONG><a name="[1b2]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
</UL>

<P><STRONG><a name="[2cd]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[157]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __hardfp_floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
</UL>

<P><STRONG><a name="[18c]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[1bd]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b6]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b5]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1bb]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b8]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1bc]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[121]"></a>_byteswap64</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, sha256.o(i._byteswap64))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _byteswap64
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Final
</UL>

<P><STRONG><a name="[c9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7c]"></a>am_adc_isr</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adc.o(i.am_adc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_adc_isr &rArr; am_hal_adc_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_fifo_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>am_bsp_low_power_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, am_bsp.o(i.am_bsp_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_bsp_low_power_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_vcomp_disable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_disable
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_bucks_enable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_bandgap_disable
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_osc_stop
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_select
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_osc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>am_clkgen_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc.o(i.am_clkgen_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_clkgen_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>am_ctimer_isr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_timers.o(i.am_ctimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_ctimer_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging_send_next_pkg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>am_gpio_isr</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, gpio.o(i.am_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_gpio_isr &rArr; am_hal_gpio_int_service
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_status_get
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_service
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>am_hal_adc_config</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, am_hal_adc.o(i.am_hal_adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_adc_config &rArr; am_hal_flash_load_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[1bf]"></a>am_hal_adc_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_adc.o(i.am_hal_adc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
</UL>

<P><STRONG><a name="[1c3]"></a>am_hal_adc_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_adc.o(i.am_hal_adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[1c4]"></a>am_hal_adc_fifo_read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, am_hal_adc.o(i.am_hal_adc_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_adc_fifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>

<P><STRONG><a name="[1c2]"></a>am_hal_adc_int_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_adc.o(i.am_hal_adc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[202]"></a>am_hal_adc_slot_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, am_hal_adc.o(i.am_hal_adc_slot_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_adc_slot_config
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_adc_slot
</UL>

<P><STRONG><a name="[f7]"></a>am_hal_adc_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_adc.o(i.am_hal_adc_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ioctl
</UL>

<P><STRONG><a name="[1ca]"></a>am_hal_clkgen_osc_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_osc_start))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_init
</UL>

<P><STRONG><a name="[1c9]"></a>am_hal_clkgen_osc_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_osc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[1ec]"></a>am_hal_clkgen_sysclk_get</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_sysclk_get))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_config
</UL>

<P><STRONG><a name="[22f]"></a>am_hal_clkgen_sysclk_select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_sysclk_select))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[274]"></a>am_hal_ctimer_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, am_hal_ctimer.o(i.am_hal_ctimer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_ctimer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
</UL>

<P><STRONG><a name="[275]"></a>am_hal_ctimer_config</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, am_hal_ctimer.o(i.am_hal_ctimer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_hal_ctimer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
</UL>

<P><STRONG><a name="[1ce]"></a>am_hal_ctimer_int_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_stop
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ctimer_isr
</UL>

<P><STRONG><a name="[279]"></a>am_hal_ctimer_int_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_stop
</UL>

<P><STRONG><a name="[277]"></a>am_hal_ctimer_int_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
</UL>

<P><STRONG><a name="[276]"></a>am_hal_ctimer_period_set</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, am_hal_ctimer.o(i.am_hal_ctimer_period_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_ctimer_period_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
</UL>

<P><STRONG><a name="[278]"></a>am_hal_ctimer_start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, am_hal_ctimer.o(i.am_hal_ctimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_ctimer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
</UL>

<P><STRONG><a name="[27a]"></a>am_hal_ctimer_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, am_hal_ctimer.o(i.am_hal_ctimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_ctimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_stop
</UL>

<P><STRONG><a name="[1d3]"></a>am_hal_debug_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, am_hal_debug.o(i.am_hal_debug_error))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nq
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nb
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_cmd_run
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_read
</UL>

<P><STRONG><a name="[1d2]"></a>am_hal_flash_load_ui32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, am_hal_flash.o(i.am_hal_flash_load_ui32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_flash_load_ui32
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_config
</UL>

<P><STRONG><a name="[100]"></a>am_hal_flash_page_erase</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, am_hal_flash.o(i.am_hal_flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[101]"></a>am_hal_flash_program_main</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, am_hal_flash.o(i.am_hal_flash_program_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_flash_program_main
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[10b]"></a>am_hal_gpio_int_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_sx1280_gpio
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Ioctl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Ioctl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Ioctl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Ioctl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Ioctl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Ioctl
</UL>

<P><STRONG><a name="[10e]"></a>am_hal_gpio_int_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Ioctl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Ioctl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Ioctl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Ioctl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Ioctl
</UL>

<P><STRONG><a name="[10c]"></a>am_hal_gpio_int_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_sx1280_gpio
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Ioctl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Ioctl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Ioctl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Ioctl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Ioctl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Ioctl
</UL>

<P><STRONG><a name="[10a]"></a>am_hal_gpio_int_register</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, am_hal_gpio.o(i.am_hal_gpio_int_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_IRQ_Register
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_IRQ_Register
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_IRQ_Register
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_IRQ_Register
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_IRQ_Register
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_IRQ_Register
</UL>

<P><STRONG><a name="[1d1]"></a>am_hal_gpio_int_service</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, am_hal_gpio.o(i.am_hal_gpio_int_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_gpio_int_service
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[1d0]"></a>am_hal_gpio_int_status_get</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, am_hal_gpio.o(i.am_hal_gpio_int_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_hal_gpio_int_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[fa]"></a>am_hal_interrupt_disable</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, am_hal_interrupt.o(i.am_hal_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ioctl
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_disable
</UL>

<P><STRONG><a name="[10d]"></a>am_hal_interrupt_enable</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, am_hal_interrupt.o(i.am_hal_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_sx1280_gpio
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Ioctl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY5_GPIO_Ioctl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY4_GPIO_Ioctl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_GPIO_Ioctl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_GPIO_Ioctl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_GPIO_Ioctl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
</UL>

<P><STRONG><a name="[1d4]"></a>am_hal_iom_config</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, am_hal_iom.o(i.am_hal_iom_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins1
</UL>

<P><STRONG><a name="[1d5]"></a>am_hal_iom_disable</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, am_hal_iom.o(i.am_hal_iom_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_iom_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_poll_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_disable
</UL>

<P><STRONG><a name="[203]"></a>am_hal_iom_enable</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_enable))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins1
</UL>

<P><STRONG><a name="[1da]"></a>am_hal_iom_fifo_empty_slots</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_fifo_empty_slots))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nq
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
</UL>

<P><STRONG><a name="[1d8]"></a>am_hal_iom_fifo_full_slots</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_fifo_full_slots))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_read
</UL>

<P><STRONG><a name="[1d7]"></a>am_hal_iom_fifo_read</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, am_hal_iom.o(i.am_hal_iom_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_iom_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_full_slots
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nq
</UL>

<P><STRONG><a name="[1d9]"></a>am_hal_iom_fifo_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, am_hal_iom.o(i.am_hal_iom_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_empty_slots
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
</UL>

<P><STRONG><a name="[1d6]"></a>am_hal_iom_poll_complete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_poll_complete))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_disable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nq
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nb
</UL>

<P><STRONG><a name="[1db]"></a>am_hal_iom_queue_spi_read</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, am_hal_iom.o(i.am_hal_iom_queue_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = am_hal_iom_queue_spi_read &rArr; am_hal_iom_spi_read_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
</UL>

<P><STRONG><a name="[1e0]"></a>am_hal_iom_queue_spi_write</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, am_hal_iom.o(i.am_hal_iom_queue_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = am_hal_iom_queue_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
</UL>

<P><STRONG><a name="[63]"></a>am_hal_iom_sleeping_queue_flush</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, am_hal_iom.o(i.am_hal_iom_sleeping_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_iom_sleeping_queue_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> am_hal_iom.o(.data)
</UL>
<P><STRONG><a name="[1e3]"></a>am_hal_iom_spi_cmd_run</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, am_hal_iom.o(i.am_hal_iom_spi_cmd_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nq
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nb
</UL>

<P><STRONG><a name="[126]"></a>am_hal_iom_spi_read</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, am_hal_iom.o(i.am_hal_iom_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = am_hal_iom_spi_read &rArr; am_hal_iom_queue_spi_read &rArr; am_hal_iom_spi_read_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read_nq
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Read
</UL>

<P><STRONG><a name="[1dd]"></a>am_hal_iom_spi_read_nb</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, am_hal_iom.o(i.am_hal_iom_spi_read_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = am_hal_iom_spi_read_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_cmd_run
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_poll_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[1e5]"></a>am_hal_iom_spi_read_nq</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, am_hal_iom.o(i.am_hal_iom_spi_read_nq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am_hal_iom_spi_read_nq &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_cmd_run
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_poll_complete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_read
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_full_slots
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
</UL>

<P><STRONG><a name="[127]"></a>am_hal_iom_spi_write</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, am_hal_iom.o(i.am_hal_iom_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = am_hal_iom_spi_write &rArr; am_hal_iom_queue_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nq
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Write
</UL>

<P><STRONG><a name="[1e1]"></a>am_hal_iom_spi_write_nb</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, am_hal_iom.o(i.am_hal_iom_spi_write_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am_hal_iom_spi_write_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_cmd_run
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_poll_complete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_write
</UL>

<P><STRONG><a name="[1e6]"></a>am_hal_iom_spi_write_nq</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, am_hal_iom.o(i.am_hal_iom_spi_write_nq))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am_hal_iom_spi_write_nq &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_cmd_run
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_poll_complete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_empty_slots
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
</UL>

<P><STRONG><a name="[1cc]"></a>am_hal_mcuctrl_bandgap_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_bandgap_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[1c0]"></a>am_hal_mcuctrl_bandgap_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_bandgap_enable))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[1c6]"></a>am_hal_mcuctrl_bucks_enable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_bucks_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[17a]"></a>am_hal_mcuctrl_device_info_get</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_device_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_IDHashProgram()
</UL>

<P><STRONG><a name="[1f4]"></a>am_hal_mcuctrl_fault_status</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_fault_status))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[1de]"></a>am_hal_queue_item_add</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, am_hal_queue.o(i.am_hal_queue_item_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[1e7]"></a>am_hal_rtc_alarm_set</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, am_hal_rtc.o(i.am_hal_rtc_alarm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_rtc_alarm_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
</UL>

<P><STRONG><a name="[1cd]"></a>am_hal_rtc_int_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_clkgen_isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
</UL>

<P><STRONG><a name="[26d]"></a>am_hal_rtc_int_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_disable
</UL>

<P><STRONG><a name="[26f]"></a>am_hal_rtc_int_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
</UL>

<P><STRONG><a name="[1cb]"></a>am_hal_rtc_osc_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[270]"></a>am_hal_rtc_osc_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_init
</UL>

<P><STRONG><a name="[1c8]"></a>am_hal_rtc_osc_select</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_select))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_init
</UL>

<P><STRONG><a name="[11e]"></a>am_hal_rtc_time_get</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, am_hal_rtc.o(i.am_hal_rtc_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_rtc_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd_to_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Read
</UL>

<P><STRONG><a name="[11f]"></a>am_hal_rtc_time_set</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, am_hal_rtc.o(i.am_hal_rtc_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_rtc_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Write
</UL>

<P><STRONG><a name="[1e2]"></a>am_hal_sysctrl_sleep</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, am_hal_sysctrl.o(i.am_hal_sysctrl_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_sleeping_queue_flush
</UL>

<P><STRONG><a name="[267]"></a>am_hal_systick_int_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_systick_configuration
</UL>

<P><STRONG><a name="[266]"></a>am_hal_systick_load</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_load))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_systick_configuration
</UL>

<P><STRONG><a name="[228]"></a>am_hal_systick_start</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_start))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_systick_configuration
</UL>

<P><STRONG><a name="[227]"></a>am_hal_systick_stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_stop))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[132]"></a>am_hal_uart_char_receive_buffered</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, am_hal_uart.o(i.am_hal_uart_char_receive_buffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = am_hal_uart_char_receive_buffered &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Read
</UL>

<P><STRONG><a name="[133]"></a>am_hal_uart_char_transmit_buffered</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, am_hal_uart.o(i.am_hal_uart_char_transmit_buffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_uart_char_transmit_buffered &rArr; ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write
</UL>

<P><STRONG><a name="[27c]"></a>am_hal_uart_clock_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_clock_disable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable
</UL>

<P><STRONG><a name="[27d]"></a>am_hal_uart_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
</UL>

<P><STRONG><a name="[12d]"></a>am_hal_uart_config</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, am_hal_uart.o(i.am_hal_uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_uart_config &rArr; config_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
</UL>

<P><STRONG><a name="[12c]"></a>am_hal_uart_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_disable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
</UL>

<P><STRONG><a name="[12e]"></a>am_hal_uart_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
</UL>

<P><STRONG><a name="[27e]"></a>am_hal_uart_fifo_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
</UL>

<P><STRONG><a name="[27b]"></a>am_hal_uart_flags_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_flags_get))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable
</UL>

<P><STRONG><a name="[1ee]"></a>am_hal_uart_init_buffered</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, am_hal_uart.o(i.am_hal_uart_init_buffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_uart_init_buffered
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_usart1
</UL>

<P><STRONG><a name="[1f2]"></a>am_hal_uart_int_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable
</UL>

<P><STRONG><a name="[12f]"></a>am_hal_uart_int_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
</UL>

<P><STRONG><a name="[1f1]"></a>am_hal_uart_int_status_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_int_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[1f0]"></a>am_hal_uart_service_buffered</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, am_hal_uart.o(i.am_hal_uart_service_buffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_hal_uart_service_buffered &rArr; ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[1c7]"></a>am_hal_vcomp_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_vcomp.o(i.am_hal_vcomp_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[73]"></a>am_systick_isr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_systick_isr))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>am_uart_isr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(i.am_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_uart_isr &rArr; am_hal_uart_service_buffered &rArr; ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_service_buffered
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_status_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>am_util_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, am_util_delay.o(i.am_util_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_util_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_oled_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_register_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>

<P><STRONG><a name="[109]"></a>am_util_delay_us</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, am_util_delay.o(i.am_util_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[c3]"></a>am_util_faultisr_collect_data</STRONG> (Thumb, 468 bytes, Stack size 72 bytes, am_util_faultisr.o(i.am_util_faultisr_collect_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = am_util_faultisr_collect_data &rArr; log_printf &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_fault_status
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStackedReg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_fault_isr
</UL>

<P><STRONG><a name="[1f5]"></a>am_util_stdio_printf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, am_util_stdio.o(i.am_util_stdio_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[22e]"></a>am_util_stdio_printf_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_util_stdio.o(i.am_util_stdio_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init_module
</UL>

<P><STRONG><a name="[1f6]"></a>am_util_stdio_vsprintf</STRONG> (Thumb, 932 bytes, Stack size 96 bytes, am_util_stdio.o(i.am_util_stdio_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_hexstr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strlen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padbuffer
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_hex
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr_to_int
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>

<P><STRONG><a name="[201]"></a>base64Decode</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, base64.o(i.base64Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = base64Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
</UL>

<P><STRONG><a name="[218]"></a>base64Encode</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, base64.o(i.base64Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = base64Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
</UL>

<P><STRONG><a name="[116]"></a>close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, vfs.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = close
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_print
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_enable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_disable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_poll
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_register_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_led_on_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key5_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key4_isr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key3_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key2_isr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key1_isr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[87]"></a>cot_key1_isr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_key1_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cot_key1_isr &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mt_key.o(i.cot_mt_key_init)
</UL>
<P><STRONG><a name="[88]"></a>cot_key2_isr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_key2_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cot_key2_isr &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mt_key.o(i.cot_mt_key_init)
</UL>
<P><STRONG><a name="[89]"></a>cot_key3_isr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_key3_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cot_key3_isr &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mt_key.o(i.cot_mt_key_init)
</UL>
<P><STRONG><a name="[8a]"></a>cot_key4_isr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_key4_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cot_key4_isr &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mt_key.o(i.cot_mt_key_init)
</UL>
<P><STRONG><a name="[8b]"></a>cot_key5_isr</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_key5_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cot_key5_isr &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mt_key.o(i.cot_mt_key_init)
</UL>
<P><STRONG><a name="[205]"></a>cot_led_on_off</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, cot_mt_led.o(i.cot_led_on_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cot_led_on_off &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_update
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_set
</UL>

<P><STRONG><a name="[8c]"></a>cot_mt_key_callback</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_mt_key_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cot_mt_key_callback &rArr; cot_mt_key_send_keys &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_send_keys
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cot_mt_key.o(i.cot_mt_key_callback)
<LI> cot_mt_key.o(i.cot_mt_key_init)
</UL>
<P><STRONG><a name="[208]"></a>cot_mt_key_init</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, cot_mt_key.o(i.cot_mt_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cot_mt_key_init &rArr; cot_mt_key_config &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_register
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task_init
</UL>

<P><STRONG><a name="[209]"></a>cot_mt_key_poll</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, cot_mt_key.o(i.cot_mt_key_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cot_mt_key_poll &rArr; read
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
</UL>

<P><STRONG><a name="[206]"></a>cot_mt_key_send_keys</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cot_mt_key.o(i.cot_mt_key_send_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cot_mt_key_send_keys &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_callback
</UL>

<P><STRONG><a name="[20a]"></a>cot_mt_led_blink</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, cot_mt_led.o(i.cot_mt_led_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = cot_mt_led_blink &rArr;  cot_mt_led_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_system_tick
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_set
</UL>

<P><STRONG><a name="[20d]"></a>cot_mt_led_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cot_mt_led.o(i.cot_mt_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cot_mt_led_init &rArr; cot_mt_led_set &rArr; cot_mt_led_blink &rArr;  cot_mt_led_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task_init
</UL>

<P><STRONG><a name="[20c]"></a>cot_mt_led_set</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cot_mt_led.o(i.cot_mt_led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cot_mt_led_set &rArr; cot_mt_led_blink &rArr;  cot_mt_led_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_blink
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_led_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_update
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_blink
</UL>

<P><STRONG><a name="[20e]"></a>cot_mt_led_update</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, cot_mt_led.o(i.cot_mt_led_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cot_mt_led_update &rArr; cot_mt_led_set &rArr; cot_mt_led_blink &rArr;  cot_mt_led_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_system_tick
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_set
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_led_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
</UL>

<P><STRONG><a name="[20f]"></a>cot_mt_oled_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cot_mt_oled.o(i.cot_mt_oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cot_mt_oled_init &rArr; OLED_DrawBMP &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_init_module
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_register_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>cot_mt_process_event</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cot_mt_task.o(i.cot_mt_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = cot_mt_process_event &rArr; cot_mt_uart_data_process &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cot_mt_key_int_enadble_status
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_update
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_poll
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_sample.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>cot_mt_uart_data_process</STRONG> (Thumb, 374 bytes, Stack size 376 bytes, cot_mt_uart.o(i.cot_mt_uart_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = cot_mt_uart_data_process &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lrc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
</UL>

<P><STRONG><a name="[215]"></a>cot_mt_uart_disable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cot_mt_uart.o(i.cot_mt_uart_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cot_mt_uart_disable &rArr; open
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
</UL>

<P><STRONG><a name="[217]"></a>cot_mt_uart_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cot_mt_uart.o(i.cot_mt_uart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cot_mt_uart_enable &rArr; open
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task_init
</UL>

<P><STRONG><a name="[214]"></a>cot_mt_uart_transport_out</STRONG> (Thumb, 160 bytes, Stack size 368 bytes, cot_mt_uart.o(i.cot_mt_uart_transport_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cot_mt_uart_transport_out &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Encode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_lrc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
</UL>

<P><STRONG><a name="[219]"></a>cot_ranging</STRONG> (Thumb, 2912 bytes, Stack size 208 bytes, cot_ranging.o(i.cot_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = cot_ranging &rArr; CheckDistance(ModulationParams_t*) &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_stop
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA0_start
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_master_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_ranging_slave_mode_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_modulation_and_packettype_param(ModulationParams_t*, PacketParams_t*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_frequency_error()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_ranging_result(RadioRangingResultTypes_t)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_radio_standby()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_dio_irq_param(unsigned short, unsigned short)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_packet_status(PacketStatus_t*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_rf_frequency(unsigned)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParametersSettings(PHYParamSettings_t*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_radio_tx(TickTime_s)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_set_radio_rx(TickTime_s)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_send_payload(unsigned char*, unsigned char, TickTime_s)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_get_payload(unsigned char*, unsigned char*, unsigned char)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[1cf]"></a>cot_ranging_send_next_pkg</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cot_ranging.o(i.cot_ranging_send_next_pkg))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ctimer_isr
</UL>

<P><STRONG><a name="[1ba]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[211]"></a>get_cot_mt_key_int_enadble_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cot_mt_key.o(i.get_cot_mt_key_int_enadble_status))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
</UL>

<P><STRONG><a name="[21d]"></a>gpio_init_module</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(i.gpio_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init_module &rArr; init_config_sx1280_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_sx1280_gpio
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_led3_gpio
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_led2_gpio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_led1_gpio
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key5_gpio
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key4_gpio
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key3_gpio
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key2_gpio
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key1_gpio
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>hal_sleep</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sleep.o(i.hal_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_sleep &rArr; open
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_stop
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
</UL>

<P><STRONG><a name="[210]"></a>iic_init_module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iic.o(i.iic_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iic_init_module &rArr; iic0_config
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_oled_init
</UL>

<P><STRONG><a name="[113]"></a>ioctl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vfs.o(i.ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_enable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_disable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_register_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalSleep()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalInit()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Wakeup()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SetDirDisable()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SetDirEnable()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteBuffer(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[15c]"></a>irq_handler_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vfs.o(i.irq_handler_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler_register
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
</UL>

<P><STRONG><a name="[22d]"></a>log_init_module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, log.o(i.log_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = log_init_module
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>log_printf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, log.o(i.log_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = log_printf &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_layer_system_message_process(cot_mac_msg_t*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[182]"></a>lseek</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vfs.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_poll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key5_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key4_isr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key3_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key2_isr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key1_isr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalInit()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Reset()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
</UL>

<P><STRONG><a name="[bd]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sample_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432 + Unknown Stack Size
<LI>Call Chain = main &rArr; osal_init_system &rArr; osalInitTasks &rArr; phy_layer_init(unsigned char) &rArr; verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_module
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init_module
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init_module
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_module
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init_module
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_oled_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_select
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_InitModule
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[238]"></a>mpi_add_abs</STRONG> (Thumb, 416 bytes, Stack size 312 bytes, bignum.o(i.mpi_add_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>

<P><STRONG><a name="[239]"></a>mpi_add_mpi</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bignum.o(i.mpi_add_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[23a]"></a>mpi_cmp_abs</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bignum.o(i.mpi_cmp_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[23c]"></a>mpi_cmp_int</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bignum.o(i.mpi_cmp_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mpi_cmp_int &rArr; mpi_cmp_mpi &rArr; mpi_cmp_abs
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[23d]"></a>mpi_cmp_mpi</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bignum.o(i.mpi_cmp_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_cmp_mpi &rArr; mpi_cmp_abs
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
</UL>

<P><STRONG><a name="[269]"></a>mpi_decode</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, bignum.o(i.mpi_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpi_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
</UL>

<P><STRONG><a name="[23e]"></a>mpi_div_mpi</STRONG> (Thumb, 1628 bytes, Stack size 1176 bytes, bignum.o(i.mpi_div_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_r
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_int
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
</UL>

<P><STRONG><a name="[26a]"></a>mpi_encode</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, bignum.o(i.mpi_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
</UL>

<P><STRONG><a name="[244]"></a>mpi_exp_mod</STRONG> (Thumb, 1242 bytes, Stack size 3000 bytes, bignum.o(i.mpi_exp_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 4576<LI>Call Chain = mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_calculrr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsa_public
</UL>

<P><STRONG><a name="[24a]"></a>mpi_lset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bignum.o(i.mpi_lset))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_calculrr
</UL>

<P><STRONG><a name="[247]"></a>mpi_mod_mpi</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bignum.o(i.mpi_mod_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_int
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_calculrr
</UL>

<P><STRONG><a name="[23f]"></a>mpi_msb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bignum.o(i.mpi_msb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[243]"></a>mpi_mul_int</STRONG> (Thumb, 192 bytes, Stack size 288 bytes, bignum.o(i.mpi_mul_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mpi_mul_int &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[240]"></a>mpi_shift_l</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, bignum.o(i.mpi_shift_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mpi_shift_l &rArr; mpi_msb
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_msb
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montg_calculrr
</UL>

<P><STRONG><a name="[242]"></a>mpi_shift_r</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, bignum.o(i.mpi_shift_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpi_shift_r
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[23b]"></a>mpi_sub_abs</STRONG> (Thumb, 232 bytes, Stack size 296 bytes, bignum.o(i.mpi_sub_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mpi_sub_abs &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_mpi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_mpi
</UL>

<P><STRONG><a name="[241]"></a>mpi_sub_mpi</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bignum.o(i.mpi_sub_mpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpi_sub_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_add_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_div_mpi
</UL>

<P><STRONG><a name="[24d]"></a>mt_task_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cot_mt_task.o(i.mt_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mt_task_init &rArr; cot_mt_led_init &rArr; cot_mt_led_set &rArr; cot_mt_led_blink &rArr;  cot_mt_led_set (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_enable
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_init
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[112]"></a>open</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vfs.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = open
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_print
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_enable
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_disable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_poll
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_register_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_led_on_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key5_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key4_isr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key3_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key2_isr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key1_isr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalInit()
</UL>

<P><STRONG><a name="[250]"></a>osalAddTimer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, osal_time.o(i.osalAddTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osalAddTimer &rArr; osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalFindTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
</UL>

<P><STRONG><a name="[265]"></a>osalDeleteTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_time.o(i.osalDeleteTimer))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
</UL>

<P><STRONG><a name="[251]"></a>osalFindTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, osal_time.o(i.osalFindTimer))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
</UL>

<P><STRONG><a name="[253]"></a>osalInitTasks</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, osal_sample.o(i.osalInitTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 5424 + Unknown Stack Size
<LI>Call Chain = osalInitTasks &rArr; phy_layer_init(unsigned char) &rArr; verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt_task_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_layer_init(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[256]"></a>osalTimeUpdate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, osal.o(i.osalTimeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osalTimeUpdate &rArr; osalTimerUpdate &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_systick_reset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_systick
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
</UL>

<P><STRONG><a name="[25a]"></a>osalTimerInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal_time.o(i.osalTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osalTimerInit &rArr; osal_systick_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_systick_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[259]"></a>osalTimerUpdate</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, osal_time.o(i.osalTimerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osalTimerUpdate &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate
</UL>

<P><STRONG><a name="[192]"></a>osal_clear_event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, osal.o(i.osal_clear_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_clear_event
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcMode()
</UL>

<P><STRONG><a name="[20b]"></a>osal_get_system_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_tick.o(i.osal_get_system_tick))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_update
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_blink
</UL>

<P><STRONG><a name="[257]"></a>osal_get_systick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_tick.o(i.osal_get_systick))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate
</UL>

<P><STRONG><a name="[235]"></a>osal_init_system</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, osal.o(i.osal_init_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 5432 + Unknown Stack Size
<LI>Call Chain = osal_init_system &rArr; osalInitTasks &rArr; phy_layer_init(unsigned char) &rArr; verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_kick
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[252]"></a>osal_mem_alloc</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, osal_memory.o(i.osal_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_create
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_init
</UL>

<P><STRONG><a name="[25c]"></a>osal_mem_free</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, osal_memory.o(i.osal_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
</UL>

<P><STRONG><a name="[25d]"></a>osal_mem_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, osal_memory.o(i.osal_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osal_mem_init &rArr; osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[25f]"></a>osal_mem_kick</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, osal_memory.o(i.osal_mem_kick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_mem_kick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[254]"></a>osal_memset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, osal.o(i.osal_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = osal_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[174]"></a>osal_msg_allocate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, osal.o(i.osal_msg_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osal_msg_allocate &rArr; osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_update
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_blink
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_send_keys
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key5_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key4_isr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key3_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key2_isr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key1_isr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_app_event_cmd(unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_msg_to_app_layer(cot_phy_payload_t*, unsigned short)
</UL>

<P><STRONG><a name="[191]"></a>osal_msg_deallocate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, osal.o(i.osal_msg_deallocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[260]"></a>osal_msg_enqueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, osal.o(i.osal_msg_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_msg_enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
</UL>

<P><STRONG><a name="[261]"></a>osal_msg_extract</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, osal.o(i.osal_msg_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_msg_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
</UL>

<P><STRONG><a name="[18f]"></a>osal_msg_receive</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, osal.o(i.osal_msg_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osal_msg_receive &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_extract
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_clear_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[175]"></a>osal_msg_send</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, osal.o(i.osal_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_update
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_blink
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_send_keys
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key5_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key4_isr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key3_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key2_isr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key1_isr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_config
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_app_event_cmd(unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_msg_to_app_layer(cot_phy_payload_t*, unsigned short)
</UL>

<P><STRONG><a name="[196]"></a>osal_mutex_create</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, osal_mutex.o(i.osal_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osal_mutex_create &rArr; osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[263]"></a>osal_next_timeout</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, osal_time.o(i.osal_next_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
</UL>

<P><STRONG><a name="[236]"></a>osal_pwrmgr_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osal_pwrmgr.o(i.osal_pwrmgr_device))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25e]"></a>osal_pwrmgr_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, osal_pwrmgr.o(i.osal_pwrmgr_init))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system
</UL>

<P><STRONG><a name="[262]"></a>osal_pwrmgr_powerconserve</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, osal_pwrmgr.o(i.osal_pwrmgr_powerconserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osal_pwrmgr_powerconserve &rArr; hal_sleep &rArr; open
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_next_timeout
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system
</UL>

<P><STRONG><a name="[264]"></a>osal_pwrmgr_task_state</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, osal_pwrmgr.o(i.osal_pwrmgr_task_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_pwrmgr_task_state
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[13b]"></a>osal_set_event</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, osal.o(i.osal_set_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_layer_system_message_process(cot_mac_msg_t*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerUpdate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxError(IrqErrorCode_t)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRangingDone(IrqRangingCode_t)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimeout()
</UL>

<P><STRONG><a name="[237]"></a>osal_start_system</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, osal.o(i.osal_start_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osal_start_system &rArr; osal_pwrmgr_powerconserve &rArr; hal_sleep &rArr; open
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>osal_start_timerEx</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, osal_time.o(i.osal_start_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osal_start_timerEx &rArr; osalAddTimer &rArr; osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalAddTimer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ack_rx()
</UL>

<P><STRONG><a name="[193]"></a>osal_stop_timerEx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, osal_time.o(i.osal_stop_timerEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_stop_timerEx
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalFindTimer
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalDeleteTimer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_incoming_command
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[25b]"></a>osal_systick_configuration</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, osal_tick.o(i.osal_systick_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osal_systick_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_start
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_load
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimerInit
</UL>

<P><STRONG><a name="[258]"></a>osal_systick_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osal_tick.o(i.osal_systick_reset))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate
</UL>

<P><STRONG><a name="[1af]"></a>read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vfs.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_poll
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key5_isr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key4_isr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key3_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key2_isr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_key1_isr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Wakeup()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WaitOnBusy()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[ff]"></a>register_dev</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vfs.o(i.register_dev))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_InitModule
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_sx1280_gpio
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_led3_gpio
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_led2_gpio
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_led1_gpio
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key5_gpio
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key4_gpio
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key3_gpio
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key2_gpio
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_key1_gpio
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_spi
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_usart1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_spi1
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic0_config
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_config
</UL>

<P><STRONG><a name="[fd]"></a>rsa_public</STRONG> (Thumb, 252 bytes, Stack size 592 bytes, rsa.o(i.rsa_public))
<BR><BR>[Stack]<UL><LI>Max Depth = 5168<LI>Call Chain = rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_encode
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_decode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_mpi
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EA_ucRSAPublicBlock
</UL>

<P><STRONG><a name="[233]"></a>rtc_init_module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc.o(i.rtc_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc_init_module &rArr; rtc0_config &rArr; rtc0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[255]"></a>sample_app_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sample_ping_pong_app.o(i.sample_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sample_app_init &rArr; osal_set_event
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[8f]"></a>sample_app_processevent</STRONG> (Thumb, 936 bytes, Stack size 376 bytes, sample_ping_pong_app.o(i.sample_app_processevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = sample_app_processevent &rArr; cot_ranging &rArr; CheckDistance(ModulationParams_t*) &rArr; std::pow(double, int) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_task_state
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac_layer_task_id()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_rf_param_get(ConfigData_t, PHYParamSettings_t*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr8x16
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_layer_system_message_process(cot_mac_msg_t*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_sample.o(.constdata)
</UL>
<P><STRONG><a name="[232]"></a>spi1_init_module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi1.o(i.spi1_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi1_init_module &rArr; init_config_spi1 &rArr; configure_pins1 &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>spi_init_module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(i.spi_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_init_module &rArr; init_config_spi &rArr; configure_pins &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[21b]"></a>timerA0_start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hal_timers.o(i.timerA0_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timerA0_start &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_enable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_config
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[21c]"></a>timerA0_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_timers.o(i.timerA0_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerA0_stop &rArr; am_hal_ctimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_disable
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_stop
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_disable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
</UL>

<P><STRONG><a name="[231]"></a>uart_init_module</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.uart_init_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_init_module &rArr; init_config_usart1 &rArr; uart_enable &rArr; am_hal_uart_config &rArr; config_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_usart1
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>wait_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_timers.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wait_ms &rArr; am_util_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_layer_init(unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_radio_channel_power()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Reset()
</UL>

<P><STRONG><a name="[18e]"></a>wait_us</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_timers.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wait_us &rArr; am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[103]"></a>write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vfs.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_uart_print
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashMcuWriteBuffer(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_led_on_off
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalInit()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Wakeup()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::Reset()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadRegister(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::WriteBuffer(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadCommand(RadioCommands_u, unsigned char*, unsigned short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::ReadBuffer(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b4]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2ce]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2cf]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d0]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d1]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2d2]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[1ff]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[27f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[282]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[285]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[28b]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[287]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
</UL>

<P><STRONG><a name="[288]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[289]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_ranging
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(double, int)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2d3]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
</UL>

<P><STRONG><a name="[2d4]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
</UL>

<P><STRONG><a name="[28a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[28e]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetFrequencyError()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::GetRangingResult(RadioRangingResultTypes_t)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[28c]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[281]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[284]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[28d]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDistance(ModulationParams_t*)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[28f]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[273]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[291]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ae]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2d5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2d6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[280]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[a8]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[286]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1be]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[292]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19d]"></a>mac_layer_system_message_process(cot_mac_msg_t*)</STRONG> (Thumb, 142 bytes, Stack size 264 bytes, sample_ping_pong_app.o(i._Z32mac_layer_system_message_processP13cot_mac_msg_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mac_layer_system_message_process(cot_mac_msg_t*) &rArr; log_printf &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_app_processevent
</UL>

<P><STRONG><a name="[213]"></a>cot_mt_process_incoming_command</STRONG> (Thumb, 686 bytes, Stack size 24 bytes, cot_mt_task.o(i.cot_mt_process_incoming_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = cot_mt_process_incoming_command &rArr; cot_mt_uart_transport_out &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_disable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_led_blink
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_printf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_process_event
</UL>

<P><STRONG><a name="[216]"></a>calculate_lrc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cot_mt_uart.o(i.calculate_lrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calculate_lrc
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_transport_out
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_uart_data_process
</UL>

<P><STRONG><a name="[8d]"></a>log_uart_print</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, log.o(i.log_uart_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_uart_print &rArr; write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(i.log_init_module)
</UL>
<P><STRONG><a name="[207]"></a>cot_mt_key_config</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, cot_mt_key.o(i.cot_mt_key_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cot_mt_key_config &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mt_key_callback
</UL>

<P><STRONG><a name="[17b]"></a>LoRaMAC_BKDRHash(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rfparamconfig.o(i._Z16LoRaMAC_BKDRHashPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMAC_BKDRHash(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_IDHashProgram()
</UL>

<P><STRONG><a name="[14e]"></a>DataFlashDataCheckSum(unsigned char*)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rfparamconfig.o(i._Z21DataFlashDataCheckSumPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataFlashDataCheckSum(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashInit(ConfigData_t*)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSaveSettings(unsigned char*, ConfigData_t*, bool, RF_RadioPacketTypes_t)
</UL>

<P><STRONG><a name="[135]"></a>LoRaMAC_IDHashProgram()</STRONG> (Thumb, 32 bytes, Stack size 88 bytes, rfparamconfig.o(i._Z21LoRaMAC_IDHashProgramv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LoRaMAC_IDHashProgram() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_device_info_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMAC_BKDRHash(unsigned char*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashLoadGeneralSettings(unsigned char*, ConfigData_t*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFlashSetDefaultSettings(unsigned char*, ConfigData_t*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_id()
</UL>

<P><STRONG><a name="[1f7]"></a>decstr_to_int</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, am_util_stdio.o(i.decstr_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = decstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[24e]"></a>divu64_10</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, am_util_stdio.o(i.divu64_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>

<P><STRONG><a name="[200]"></a>ftoa</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, am_util_stdio.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[1fa]"></a>ndigits_in_hex</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, am_util_stdio.o(i.ndigits_in_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndigits_in_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[1fe]"></a>ndigits_in_i64</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ndigits_in_i64 &rArr; ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[1fc]"></a>ndigits_in_u64</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
</UL>

<P><STRONG><a name="[1f9]"></a>padbuffer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, am_util_stdio.o(i.padbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = padbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[1f8]"></a>simple_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, am_util_stdio.o(i.simple_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[1fb]"></a>uint64_to_hexstr</STRONG> (Thumb, 138 bytes, Stack size 44 bytes, am_util_stdio.o(i.uint64_to_hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uint64_to_hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[1fd]"></a>uint64_to_str</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, am_util_stdio.o(i.uint64_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[10]"></a>USART_Ioctl</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, uart.o(i.USART_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Ioctl &rArr; uart_enable &rArr; am_hal_uart_config &rArr; config_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_enable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_disable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USART_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uart.o(i.USART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USART_Read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, uart.o(i.USART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Read &rArr; am_hal_uart_char_receive_buffered &rArr; ring_buffer_read
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_char_receive_buffered
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USART_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.USART_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USART_Write</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, uart.o(i.USART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Write &rArr; am_hal_uart_char_transmit_buffered &rArr; ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_disable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_char_transmit_buffered
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.data)
</UL>
<P><STRONG><a name="[22c]"></a>init_config_usart1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.init_config_usart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_config_usart1 &rArr; uart_enable &rArr; am_hal_uart_config &rArr; config_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_init_buffered
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_module
</UL>

<P><STRONG><a name="[130]"></a>uart_disable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(i.uart_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_clear
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_flags_get
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_disable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_clock_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
</UL>

<P><STRONG><a name="[131]"></a>uart_enable</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, uart.o(i.uart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_enable &rArr; am_hal_uart_config &rArr; config_baudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_enable
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_fifo_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_enable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_clock_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_usart1
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Ioctl
</UL>

<P><STRONG><a name="[11]"></a>FLASH_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flash.o(i.FLASH_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_Release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flash.o(i.FLASH_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_Ioctl</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi.o(i.SPI_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Ioctl &rArr; configure_pins &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_disable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>SPI_Lseek</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spi.o(i.SPI_Lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Lseek &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>SPI_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>SPI_Read</STRONG> (Thumb, 246 bytes, Stack size 192 bytes, spi.o(i.SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SPI_Read &rArr; am_hal_iom_spi_read &rArr; am_hal_iom_queue_spi_read &rArr; am_hal_iom_spi_read_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>SPI_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi.o(i.SPI_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>SPI_Write</STRONG> (Thumb, 242 bytes, Stack size 128 bytes, spi.o(i.SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SPI_Write &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_queue_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.data)
</UL>
<P><STRONG><a name="[129]"></a>configure_pins</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, spi.o(i.configure_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = configure_pins &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_spi
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Ioctl
</UL>

<P><STRONG><a name="[22a]"></a>init_config_spi</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(i.init_config_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_config_spi &rArr; configure_pins &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init_module
</UL>

<P><STRONG><a name="[128]"></a>spi_disable</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, spi.o(i.spi_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_disable &rArr; am_hal_iom_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Ioctl
</UL>

<P><STRONG><a name="[28]"></a>KEY1_GPIO_IRQ_Register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gpio.o(i.KEY1_GPIO_IRQ_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY1_GPIO_IRQ_Register &rArr; am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>KEY1_GPIO_Ioctl</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gpio.o(i.KEY1_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY1_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>KEY1_GPIO_Lseek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.KEY1_GPIO_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>KEY1_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.KEY1_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY1_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>KEY1_GPIO_Read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gpio.o(i.KEY1_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY1_GPIO_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>KEY1_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.KEY1_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY1_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>KEY2_GPIO_IRQ_Register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gpio.o(i.KEY2_GPIO_IRQ_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY2_GPIO_IRQ_Register &rArr; am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>KEY2_GPIO_Ioctl</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, gpio.o(i.KEY2_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY2_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>KEY2_GPIO_Lseek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.KEY2_GPIO_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>KEY2_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.KEY2_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY2_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>KEY2_GPIO_Read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gpio.o(i.KEY2_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY2_GPIO_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>KEY2_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.KEY2_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY2_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>KEY3_GPIO_IRQ_Register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gpio.o(i.KEY3_GPIO_IRQ_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY3_GPIO_IRQ_Register &rArr; am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>KEY3_GPIO_Ioctl</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, gpio.o(i.KEY3_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY3_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>KEY3_GPIO_Lseek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.KEY3_GPIO_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>KEY3_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.KEY3_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY3_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>KEY3_GPIO_Read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gpio.o(i.KEY3_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY3_GPIO_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>KEY3_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.KEY3_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY3_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>KEY4_GPIO_IRQ_Register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gpio.o(i.KEY4_GPIO_IRQ_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY4_GPIO_IRQ_Register &rArr; am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>KEY4_GPIO_Ioctl</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gpio.o(i.KEY4_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY4_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>KEY4_GPIO_Lseek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.KEY4_GPIO_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>KEY4_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.KEY4_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY4_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>KEY4_GPIO_Read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gpio.o(i.KEY4_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY4_GPIO_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>KEY4_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.KEY4_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY4_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>KEY5_GPIO_IRQ_Register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gpio.o(i.KEY5_GPIO_IRQ_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KEY5_GPIO_IRQ_Register &rArr; am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>KEY5_GPIO_Ioctl</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gpio.o(i.KEY5_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY5_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>KEY5_GPIO_Lseek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.KEY5_GPIO_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>KEY5_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.KEY5_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY5_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>KEY5_GPIO_Read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gpio.o(i.KEY5_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY5_GPIO_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>KEY5_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.KEY5_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KEY5_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LED1_GPIO_Ioctl</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gpio.o(i.LED1_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED1_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LED1_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.LED1_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED1_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LED1_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.LED1_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED1_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LED1_GPIO_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(i.LED1_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED1_GPIO_Write &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LED2_GPIO_Ioctl</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gpio.o(i.LED2_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED2_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LED2_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.LED2_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED2_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LED2_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.LED2_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED2_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LED2_GPIO_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(i.LED2_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED2_GPIO_Write &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LED3_GPIO_Ioctl</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gpio.o(i.LED3_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED3_GPIO_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>LED3_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.LED3_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED3_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LED3_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.LED3_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED3_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LED3_GPIO_Write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gpio.o(i.LED3_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED3_GPIO_Write &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>SX1280_GPIO_IRQ_Register</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gpio.o(i.SX1280_GPIO_IRQ_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1280_GPIO_IRQ_Register &rArr; am_hal_gpio_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_register
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>SX1280_GPIO_Ioctl</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, gpio.o(i.SX1280_GPIO_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280_GPIO_Ioctl &rArr; init_config_sx1280_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_sx1280_gpio
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>SX1280_GPIO_Lseek</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.SX1280_GPIO_Lseek))
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>SX1280_GPIO_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(i.SX1280_GPIO_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1280_GPIO_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>SX1280_GPIO_Read</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, gpio.o(i.SX1280_GPIO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280_GPIO_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>SX1280_GPIO_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i.SX1280_GPIO_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1280_GPIO_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>SX1280_GPIO_Write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, gpio.o(i.SX1280_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1280_GPIO_Write &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[21e]"></a>init_config_key1_gpio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(i.init_config_key1_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_key1_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[21f]"></a>init_config_key2_gpio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(i.init_config_key2_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_key2_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[220]"></a>init_config_key3_gpio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(i.init_config_key3_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_key3_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[221]"></a>init_config_key4_gpio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(i.init_config_key4_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_key4_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[222]"></a>init_config_key5_gpio</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(i.init_config_key5_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_key5_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[223]"></a>init_config_led1_gpio</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio.o(i.init_config_led1_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_led1_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[224]"></a>init_config_led2_gpio</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio.o(i.init_config_led2_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_led2_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[225]"></a>init_config_led3_gpio</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio.o(i.init_config_led3_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_led3_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
</UL>

<P><STRONG><a name="[12b]"></a>init_config_sx1280_gpio</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, gpio.o(i.init_config_sx1280_gpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_config_sx1280_gpio
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_module
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280_GPIO_Ioctl
</UL>

<P><STRONG><a name="[52]"></a>RTC0_Ioctl</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtc.o(i.RTC0_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC0_Ioctl &rArr; rtc0_enable &rArr; am_hal_rtc_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>RTC0_Lseek</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtc.o(i.RTC0_Lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC0_Lseek &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>RTC0_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtc.o(i.RTC0_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC0_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>RTC0_Read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtc.o(i.RTC0_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC0_Read &rArr; am_hal_rtc_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_time_get
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>RTC0_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc.o(i.RTC0_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC0_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>RTC0_Write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rtc.o(i.RTC0_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC0_Write &rArr; am_hal_rtc_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_time_set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.data)
</UL>
<P><STRONG><a name="[26b]"></a>rtc0_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtc.o(i.rtc0_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc0_config &rArr; rtc0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_module
</UL>

<P><STRONG><a name="[11d]"></a>rtc0_disable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc.o(i.rtc0_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc0_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_disable
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Ioctl
</UL>

<P><STRONG><a name="[11c]"></a>rtc0_enable</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, rtc.o(i.rtc0_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtc0_enable &rArr; am_hal_rtc_time_get
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_time_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_int_enable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_int_clear
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_alarm_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alram_time
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0_Ioctl
</UL>

<P><STRONG><a name="[26c]"></a>rtc0_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc.o(i.rtc0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_select
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_enable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_osc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_config
</UL>

<P><STRONG><a name="[26e]"></a>rtc_alram_time</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, rtc.o(i.rtc_alram_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_alram_time
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc0_enable
</UL>

<P><STRONG><a name="[57]"></a>ADC_Ioctl</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, adc.o(i.ADC_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Ioctl &rArr; adc_enable &rArr; am_hal_adc_config &rArr; am_hal_flash_load_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_disable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_trigger
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_adc_slot
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>ADC_Lseek</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc.o(i.ADC_Lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Lseek &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>ADC_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, adc.o(i.ADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>ADC_Read</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, adc.o(i.ADC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>ADC_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc.o(i.ADC_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>adc_disable</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, adc.o(i.adc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ioctl
</UL>

<P><STRONG><a name="[f8]"></a>adc_enable</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, adc.o(i.adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_enable &rArr; am_hal_adc_config &rArr; am_hal_flash_load_ui32
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_bandgap_enable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_int_enable
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_enable
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ioctl
</UL>

<P><STRONG><a name="[fb]"></a>configure_adc_slot</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, adc.o(i.configure_adc_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = configure_adc_slot &rArr; am_hal_adc_slot_config
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_adc_slot_config
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ioctl
</UL>

<P><STRONG><a name="[5c]"></a>IIC0_Ioctl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, iic.o(i.IIC0_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC0_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic0_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic0_disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>IIC0_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iic.o(i.IIC0_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC0_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>IIC0_Read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, iic.o(i.IIC0_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC0_Read &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>IIC0_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, iic.o(i.IIC0_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC0_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>IIC0_Write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, iic.o(i.IIC0_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC0_Write &rArr; IIC_Write_Byte &rArr; am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>IIC_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Write
</UL>

<P><STRONG><a name="[108]"></a>IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Write
</UL>

<P><STRONG><a name="[107]"></a>IIC_Write_Byte</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, iic.o(i.IIC_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Write_Byte &rArr; am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Write
</UL>

<P><STRONG><a name="[229]"></a>iic0_config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iic.o(i.iic0_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic0_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_init_module
</UL>

<P><STRONG><a name="[105]"></a>iic0_disable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, iic.o(i.iic0_disable))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Ioctl
</UL>

<P><STRONG><a name="[104]"></a>iic0_init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, iic.o(i.iic0_init))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic0_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Ioctl
</UL>

<P><STRONG><a name="[62]"></a>SPI1_Ioctl</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, spi1.o(i.SPI1_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_Ioctl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_disable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>SPI1_Lseek</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi1.o(i.SPI1_Lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_Lseek &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>SPI1_Open</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spi1.o(i.SPI1_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_Open &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>SPI1_Read</STRONG> (Thumb, 208 bytes, Stack size 192 bytes, spi1.o(i.SPI1_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = SPI1_Read &rArr; am_hal_iom_spi_read &rArr; am_hal_iom_queue_spi_read &rArr; am_hal_iom_spi_read_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>SPI1_Release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi1.o(i.SPI1_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_Release &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>SPI1_Write</STRONG> (Thumb, 202 bytes, Stack size 160 bytes, spi1.o(i.SPI1_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = SPI1_Write &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_queue_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_spi_cmd_run &rArr; internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi1.o(.data)
</UL>
<P><STRONG><a name="[204]"></a>configure_pins1</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, spi1.o(i.configure_pins1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = configure_pins1 &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config_spi1
</UL>

<P><STRONG><a name="[22b]"></a>init_config_spi1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi1.o(i.init_config_spi1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_config_spi1 &rArr; configure_pins1 &rArr; am_hal_iom_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_dev
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins1
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init_module
</UL>

<P><STRONG><a name="[125]"></a>spi1_disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi1.o(i.spi1_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi1_disable &rArr; am_hal_iom_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Ioctl
</UL>

<P><STRONG><a name="[1e4]"></a>internal_am_hal_iom_spi_cmd_construct</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, am_hal_iom.o(i.internal_am_hal_iom_spi_cmd_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = internal_am_hal_iom_spi_cmd_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_cmd_run
</UL>

<P><STRONG><a name="[1e9]"></a>bcd_to_dec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_hal_rtc.o(i.bcd_to_dec))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_time_get
</UL>

<P><STRONG><a name="[1e8]"></a>dec_to_bcd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_hal_rtc.o(i.dec_to_bcd))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_time_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_alarm_set
</UL>

<P><STRONG><a name="[268]"></a>am_hal_uart_ring_buffer_space_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_ring_buffer_space_left))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_write
</UL>

<P><STRONG><a name="[1ed]"></a>config_baudrate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, am_hal_uart.o(i.config_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = config_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_config
</UL>

<P><STRONG><a name="[1ef]"></a>ring_buffer_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_uart.o(i.ring_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_init_buffered
</UL>

<P><STRONG><a name="[1ea]"></a>ring_buffer_read</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, am_hal_uart.o(i.ring_buffer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ring_buffer_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_service_buffered
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_char_receive_buffered
</UL>

<P><STRONG><a name="[1eb]"></a>ring_buffer_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, am_hal_uart.o(i.ring_buffer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ring_buffer_write
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_ring_buffer_space_left
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_service_buffered
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_char_transmit_buffered
</UL>

<P><STRONG><a name="[136]"></a>set_ack_rx()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cot_mac.o(i._Z10set_ack_rxv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_ack_rx() &rArr; osal_start_timerEx &rArr; osalAddTimer &rArr; osal_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_symbols_of_ack_in_lr24(RadioLoRaSpreadingFactors_t, RadioLoRaBandwidths_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[13c]"></a>verify_sign()</STRONG> (Thumb, 136 bytes, Stack size 208 bytes, cot_mac.o(i._Z11verify_signv))
<BR><BR>[Stack]<UL><LI>Max Depth = 5408 + Unknown Stack Size
<LI>Call Chain = verify_sign() &rArr; EA_ucRSAPublicBlock &rArr; rsa_public &rArr; mpi_exp_mod &rArr; mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_id()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Final
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EA_ucRSAPublicBlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataOtp(unsigned char*, unsigned, unsigned)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_layer_init(unsigned char)
</UL>

<P><STRONG><a name="[154]"></a>get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)</STRONG> (Thumb, 1818 bytes, Stack size 136 bytes, cot_mac.o(i._Z15get_time_on_airh18ModulationParams_t14PacketParams_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t) &rArr; __hardfp_floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ceil(float)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mac_ack_msg(unsigned)
</UL>

<P><STRONG><a name="[15a]"></a>init_parameters(PHYParamSettings_t*)</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, cot_mac.o(i._Z15init_parametersP18PHYParamSettings_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = init_parameters(PHYParamSettings_t*) &rArr; SX1280::SetRfFrequency(unsigned) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_register
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::Init()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetBufferBaseAddresses(unsigned char, unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetModulationParams(ModulationParams_t*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRegulatorMode(RadioRegulatorModes_t)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetCrcPolynomial(unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketParams(PacketParams_t*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRfFrequency(unsigned)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetPacketType(RadioPacketTypes_t)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetTxParams(signed char, RadioRampTimes_t)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetSyncWord(unsigned char, unsigned char*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetStandby(RadioStandbyModes_t)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetCrcSeed(unsigned char*)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParametersSettings(PHYParamSettings_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[173]"></a>send_app_event_cmd(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cot_mac.o(i._Z18send_app_event_cmdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = send_app_event_cmd(unsigned char) &rArr; osal_msg_send &rArr; osal_msg_deallocate &rArr; osal_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[186]"></a>set_ModulationParameters(PHYParamSettings_t*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cot_mac.o(i._Z24set_ModulationParametersP18PHYParamSettings_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = set_ModulationParameters(PHYParamSettings_t*) &rArr; set_workparameters() &rArr; SX1280::SetRfFrequency(unsigned) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workparameters()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParametersSettings(PHYParamSettings_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_system_msg_process(cot_mac_msg_t*)
</UL>

<P><STRONG><a name="[190]"></a>cot_mac_layer_system_msg_process(cot_mac_msg_t*)</STRONG> (Thumb, 578 bytes, Stack size 304 bytes, cot_mac.o(i._Z32cot_mac_layer_system_msg_processP13cot_mac_msg_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = cot_mac_layer_system_msg_process(cot_mac_msg_t*) &rArr; send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s) &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mutex_create
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ModulationParameters(PHYParamSettings_t*)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameters(PHYParamSettings_t*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_on_air(unsigned char, ModulationParams_t, PacketParams_t)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::HalSleep()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetSleep(SleepParams_t)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetRx(TickTime_s)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetDioIrqParams(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280::SetSaveContext()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_phy_payload_format_to_radio_ram_data(cot_phy_payload_t*, unsigned short, unsigned char*, unsigned*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_protocol_parse_callback_register(signed char(*)(), void(*)(unsigned char*, unsigned, PacketParams_t*, unsigned short, TickTime_s))
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_msg_format_to_cot_phy_payload(unsigned char*, unsigned short, unsigned, unsigned, unsigned char, cot_phy_payload_t*, unsigned*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pkg_by_backoffPeriod(unsigned char*, unsigned, ModulationParams_t*, PacketParams_t*, unsigned short, TickTime_s)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rssi_water_leve(short)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRcMode()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cot_mac_layer_processevent(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[a0]"></a>__sti___11_cot_mac_cpp_be55acdf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cot_mac.o(i.__sti___11_cot_mac_cpp_be55acdf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___11_cot_mac_cpp_be55acdf &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1280Hal::SX1280Hal(RadioCallbacks_t*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cot_mac.o(.init_array)
</UL>
<P><STRONG><a name="[124]"></a>SHA256Guts</STRONG> (Thumb, 574 bytes, Stack size 72 bytes, sha256.o(i.SHA256Guts))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SHA256Guts
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256Update
</UL>

<P><STRONG><a name="[246]"></a>mpi_montg_calculrr</STRONG> (Thumb, 776 bytes, Stack size 24 bytes, bignum.o(i.mpi_montg_calculrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = mpi_montg_calculrr &rArr; mpi_mod_mpi &rArr; mpi_div_mpi &rArr; mpi_add_mpi &rArr; mpi_add_abs &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mod_mpi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_shift_l
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_lset
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[245]"></a>mpi_montg_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bignum.o(i.mpi_montg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mpi_montg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[248]"></a>mpi_montmul</STRONG> (Thumb, 5844 bytes, Stack size 584 bytes, bignum.o(i.mpi_montmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_cmp_abs
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_mul_hlp
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montred
</UL>

<P><STRONG><a name="[249]"></a>mpi_montred</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, bignum.o(i.mpi_montred))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = mpi_montred &rArr; mpi_montmul &rArr; mpi_sub_hlp
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_exp_mod
</UL>

<P><STRONG><a name="[24c]"></a>mpi_sub_hlp</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, bignum.o(i.mpi_sub_hlp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpi_sub_hlp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_sub_abs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpi_montmul
</UL>

<P><STRONG><a name="[290]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[283]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[db]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[82]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
